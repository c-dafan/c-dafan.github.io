<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c-dafan.github.io/"/>
  <updated>2020-03-24T14:19:30.302Z</updated>
  <id>http://c-dafan.github.io/</id>
  
  <author>
    <name>da fan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pytorch 分布式多卡并行训练模型</title>
    <link href="http://c-dafan.github.io/03/24/pytorch%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <id>http://c-dafan.github.io/03/24/pytorch分布式/</id>
    <published>2020-03-24T14:13:34.000Z</published>
    <updated>2020-03-24T14:19:30.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pytorch-单机多卡训练模型"><a href="#pytorch-单机多卡训练模型" class="headerlink" title="pytorch 单机多卡训练模型"></a>pytorch 单机多卡训练模型</h2><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>现在大部分github支持分布式训练，如果不支持需要做一下更改</p>
<p>需要加入参数–local_rank</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parser.add_argument(<span class="string">"--local_rank"</span>, type=int, default=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>使用local_rank初始化设备</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">device = torch.device(<span class="string">'cuda:&#123;&#125;'</span>.format(args.local_rank))</div><div class="line">torch.cuda.set_device(args.local_rank)</div><div class="line">torch.distributed.init_process_group(backend=<span class="string">"nccl"</span>, init_method=<span class="string">"env://"</span>)</div></pre></td></tr></table></figure>
<p>创建数据加载器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train_sampler = DistributedSampler(train_dataset)</div><div class="line">trainloader = torch.utils.data.DataLoader(train_dataset,batch_size=config.TRAIN.BATCH_SIZE_PER_GPU, shuffle=config.TRAIN.SHUFFLE <span class="keyword">and</span> train_sampler <span class="keyword">is</span> <span class="keyword">None</span>,num_workers=config.WORKERS, sampler=train_sampler)</div></pre></td></tr></table></figure>
<p>创建模型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">model = nn.SyncBatchNorm.convert_sync_batchnorm(model)</div><div class="line">model = model.to(device)</div><div class="line">model = nn.parallel.DistributedDataParallel(</div><div class="line">model, device_ids=[args.local_rank], output_device=args.local_rank)</div></pre></td></tr></table></figure>
<p>网上有很多教程，这里只做粗略介绍。</p>
<h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m torch.distributed.launch --nproc_per_node=2 train.py 参数</div></pre></td></tr></table></figure>
<p>nproc_per_node 表示GPU的个数</p>
<h2 id="pytorch-多机多卡训练模型"><a href="#pytorch-多机多卡训练模型" class="headerlink" title="pytorch 多机多卡训练模型"></a>pytorch 多机多卡训练模型</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>通过实验，发现需要多台机器之前相互可以ping通，才可以进行多机多卡训练。比如</p>
<ul>
<li>A主机与B主机连着同一个路由器，这样A主机与B主机是可以相互连通的。</li>
<li>如果在A主机下的容器主机CA，和B主机下的容器主机CB，他们之前是相互独立的，CA ping不通 CB，同样CB ping不通CA。所以需要借助一个插件weave，把A主机的docker与B主机的docker相互连通，这样CA与CB通过虚拟网关相互连通。</li>
</ul>
<h4 id="weave插件的使用"><a href="#weave插件的使用" class="headerlink" title="weave插件的使用"></a>weave插件的使用</h4><p>假如现在有3台主机A、B、C。把A当作主节点，B、C当作工作节点，要求B和C可以与A在同一局域网。</p>
<p>在A上运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weave launch --host A的ip地址 --ipalloc-range 10.32.0.0/12</div></pre></td></tr></table></figure></p>
<p>在B、C上运行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weave launch --host A的ip地址</div></pre></td></tr></table></figure>
<h4 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h4><p>在创建容器时，需要指定网络weave，这样才可以让容器之前相互连通。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvidia-docker run -itd --net=weave --shm-size=60G --name 容器名 镜像名 /bin/bash</div></pre></td></tr></table></figure></p>
<p>如果需要挂载数据卷，可以使用 参数-v<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvidia-docker run -itd -v /data/g9:/data --net=weave --shm-size=60G --name 容器名 镜像名 /bin/bash</div></pre></td></tr></table></figure></p>
<p>进入容器，通过<em>ifconfig</em>可以查看网络。</p>
<h3 id="pytorch运行方式"><a href="#pytorch运行方式" class="headerlink" title="pytorch运行方式"></a>pytorch运行方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m torch.distributed.launch --nproc_per_node=2  --nnodes=2 --node_rank=0 --master_addr="10.44.0.0"   --master_port=6666 train.py 参数</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pytorch-单机多卡训练模型&quot;&gt;&lt;a href=&quot;#pytorch-单机多卡训练模型&quot; class=&quot;headerlink&quot; title=&quot;pytorch 单机多卡训练模型&quot;&gt;&lt;/a&gt;pytorch 单机多卡训练模型&lt;/h2&gt;&lt;h3 id=&quot;修改代码&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="pytorch" scheme="http://c-dafan.github.io/categories/pytorch/"/>
    
    
      <category term="note" scheme="http://c-dafan.github.io/tags/note/"/>
    
      <category term="deeplearning" scheme="http://c-dafan.github.io/tags/deeplearning/"/>
    
      <category term="pytorch" scheme="http://c-dafan.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>pytorch走过的坑</title>
    <link href="http://c-dafan.github.io/10/06/pytorch%E8%B5%B0%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>http://c-dafan.github.io/10/06/pytorch走过的坑/</id>
    <published>2019-10-06T08:09:36.000Z</published>
    <updated>2019-10-06T08:13:28.899Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学习pytorch遇到的两大坑</p>
<blockquote>
<ul>
<li>zero_grad</li>
</ul>
</blockquote>
<p>需要收到清空历史梯度</p>
<blockquote>
<ul>
<li>torch.nn.CrossEntropyLoss</li>
</ul>
</blockquote>
<p>不用加入激活层softmax，在运算时已经加入了，如果加入softmax用nnl损失</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下学习pytorch遇到的两大坑&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;zero_grad&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要收到清空历史梯度&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;torch.nn.CrossEn
    
    </summary>
    
      <category term="pytorch" scheme="http://c-dafan.github.io/categories/pytorch/"/>
    
    
      <category term="note" scheme="http://c-dafan.github.io/tags/note/"/>
    
      <category term="deeplearning" scheme="http://c-dafan.github.io/tags/deeplearning/"/>
    
      <category term="pytorch" scheme="http://c-dafan.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>git_tree</title>
    <link href="http://c-dafan.github.io/09/24/git-tree/"/>
    <id>http://c-dafan.github.io/09/24/git-tree/</id>
    <published>2019-09-24T10:08:43.000Z</published>
    <updated>2019-09-24T10:13:07.725Z</updated>
    
    <content type="html"><![CDATA[<p>DownGit链接：<a href="https://www.itsvse.com/downgit/" target="_blank" rel="external">https://www.itsvse.com/downgit/</a></p>
<p>现在有一个test仓库<a href="https://github.com/mygithub/test" target="_blank" rel="external">https://github.com/mygithub/test</a><br>你要gitclone里面的tt子目录：<br>在本地的硬盘位置打开Git Bash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git init test &amp;&amp; cd test     //新建仓库并进入文件夹</div><div class="line">git config core.sparsecheckout true //设置允许克隆子目录</div><div class="line"></div><div class="line">echo &apos;tt*&apos; &gt;&gt; .git/info/sparse-checkout //设置要克隆的仓库的子目录路径   //空格别漏</div><div class="line"></div><div class="line">git remote add origin git@github.com:mygithub/test.git  //这里换成你要克隆的项目和库</div><div class="line"></div><div class="line">git pull origin master    //下载</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DownGit链接：&lt;a href=&quot;https://www.itsvse.com/downgit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.itsvse.com/downgit/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在有一个test仓库
    
    </summary>
    
      <category term="git" scheme="http://c-dafan.github.io/categories/git/"/>
    
    
      <category term="trick" scheme="http://c-dafan.github.io/tags/trick/"/>
    
      <category term="git" scheme="http://c-dafan.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>leecode24</title>
    <link href="http://c-dafan.github.io/06/03/leecode24/"/>
    <id>http://c-dafan.github.io/06/03/leecode24/</id>
    <published>2019-06-03T06:03:23.000Z</published>
    <updated>2019-06-03T06:05:56.631Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/leecode24.PNG" alt="题目"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Solution:</div><div class="line">    def swapPairs(self, head: ListNode) -&gt; ListNode:</div><div class="line">        </div><div class="line">        newhead = ListNode(0)</div><div class="line">        </div><div class="line">        newhead.next = head</div><div class="line">        </div><div class="line">        l1 = newhead</div><div class="line">        if l1.next is None:</div><div class="line">            return head</div><div class="line">        l2 = newhead.next.next</div><div class="line">        if l2 is None:</div><div class="line">            return head</div><div class="line">        while True:</div><div class="line">            tmp = l1.next</div><div class="line">            l1.next = l2</div><div class="line">            tmp.next = l2.next</div><div class="line">            l2.next = tmp</div><div class="line">            l1 = tmp</div><div class="line">            if l1.next is None:</div><div class="line">                break</div><div class="line">            l2 = l1.next.next</div><div class="line">            try:</div><div class="line">                l2.next</div><div class="line">            except:</div><div class="line">                break</div><div class="line">        </div><div class="line">        return newhead.next</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/leecode24.PNG&quot; alt=&quot;题目&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="leecode" scheme="http://c-dafan.github.io/categories/leecode/"/>
    
    
      <category term="leecode" scheme="http://c-dafan.github.io/tags/leecode/"/>
    
  </entry>
  
  <entry>
    <title>leecode718</title>
    <link href="http://c-dafan.github.io/06/03/leecode718/"/>
    <id>http://c-dafan.github.io/06/03/leecode718/</id>
    <published>2019-06-03T05:55:58.000Z</published>
    <updated>2019-06-03T06:04:25.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/leecode718.PNG" alt="题目"></p>
<p>比较简单的动态规划，自己能找到状态转换关系的第一道动态规划题</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLength</span><span class="params">(self, A: List[int], B: List[int])</span> -&gt; int:</span></div><div class="line">        a_len = len(A)</div><div class="line">        b_len = len(B)</div><div class="line">        dp = [[<span class="number">0</span>] * a_len <span class="keyword">for</span> _ <span class="keyword">in</span> range(b_len)]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(a_len):</div><div class="line">            <span class="keyword">if</span> A[i] == B[<span class="number">0</span>]:</div><div class="line">                dp[<span class="number">0</span>][i] = <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(b_len):</div><div class="line">            <span class="keyword">if</span> B[j] == A[<span class="number">0</span>]:</div><div class="line">                dp[j][<span class="number">0</span>] = <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, b_len):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, a_len):</div><div class="line">                <span class="keyword">if</span> A[j] == B[i]:</div><div class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max([max(x) <span class="keyword">for</span> x <span class="keyword">in</span> dp])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/leecode718.PNG&quot; alt=&quot;题目&quot;&gt;&lt;/p&gt;
&lt;p&gt;比较简单的动态规划，自己能找到状态转换关系的第一道动态规划题&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="leecode" scheme="http://c-dafan.github.io/categories/leecode/"/>
    
    
      <category term="leecode" scheme="http://c-dafan.github.io/tags/leecode/"/>
    
  </entry>
  
  <entry>
    <title>python_tqdm</title>
    <link href="http://c-dafan.github.io/05/27/python-tqdm/"/>
    <id>http://c-dafan.github.io/05/27/python-tqdm/</id>
    <published>2019-05-27T07:28:33.000Z</published>
    <updated>2019-06-03T06:17:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://www.jianshu.com/p/21cf48be6bf6" target="_blank" rel="external">https://www.jianshu.com/p/21cf48be6bf6</a></p>
<p><a href="https://blog.csdn.net/zkp_987/article/details/81748098" target="_blank" rel="external">https://blog.csdn.net/zkp_987/article/details/81748098</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进度条&quot;&gt;&lt;a href=&quot;#进度条&quot; class=&quot;headerlink&quot; title=&quot;进度条&quot;&gt;&lt;/a&gt;进度条&lt;/h2&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p
    
    </summary>
    
      <category term="python" scheme="http://c-dafan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://c-dafan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>leecode/math50</title>
    <link href="http://c-dafan.github.io/05/24/leecode-math50/"/>
    <id>http://c-dafan.github.io/05/24/leecode-math50/</id>
    <published>2019-05-24T02:55:52.000Z</published>
    <updated>2019-05-24T03:07:10.331Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/leecode50.png" alt="题"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></div><div class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> self.core_func(x, n)</div><div class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span> / self.core_func(x, -n)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">core_func</span><span class="params">(self, x, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> x</div><div class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            a = self.myPow(x, n//<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> a*a</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            a = self.myPow(x, n //<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> a * a * x</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/leecode50.png&quot; alt=&quot;题&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="leecode" scheme="http://c-dafan.github.io/categories/leecode/"/>
    
    
      <category term="leecode" scheme="http://c-dafan.github.io/tags/leecode/"/>
    
  </entry>
  
  <entry>
    <title>训练技巧总结</title>
    <link href="http://c-dafan.github.io/05/15/dl_train-trick/"/>
    <id>http://c-dafan.github.io/05/15/dl_train-trick/</id>
    <published>2019-05-15T02:05:19.000Z</published>
    <updated>2019-06-03T06:14:16.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul>
<li>数据归一化。</li>
<li>随机乱序，在最后抖动的时候，会很稳定</li>
<li>数据增强器，对于数据少的情况，尤为重要。 <a href="/05/15/dl_ImageDataGenerator">图像数据增强器的使用</a></li>
</ul>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li>加Batch Normalization, 加Batch Normalization很管用，尤其是数据没有归一化的时候。</li>
<li>dropout一定程度可以防止过拟合</li>
</ul>
<h2 id="优化函数"><a href="#优化函数" class="headerlink" title="优化函数"></a>优化函数</h2><ul>
<li>优化函数，学习率。会影响一点</li>
<li>adam 好用简单，但是优化到后面就优化步长太小了</li>
<li>sgd 大佬专用，很多论文中，建议用sgd，但是对于我（小白），会出现loss不下降情况</li>
<li>学习率lr 衰减策略</li>
<li>学习率小一点，学习慢一点</li>
</ul>
<p><a href="https://blog.csdn.net/jiachen0212/article/details/80086926" target="_blank" rel="external">优化函数总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据处理&quot;&gt;&lt;a href=&quot;#数据处理&quot; class=&quot;headerlink&quot; title=&quot;数据处理&quot;&gt;&lt;/a&gt;数据处理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据归一化。&lt;/li&gt;
&lt;li&gt;随机乱序，在最后抖动的时候，会很稳定&lt;/li&gt;
&lt;li&gt;数据增强器，对于数据少的
    
    </summary>
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/tags/deeplearn/"/>
    
      <category term="trick" scheme="http://c-dafan.github.io/tags/trick/"/>
    
      <category term="train" scheme="http://c-dafan.github.io/tags/train/"/>
    
  </entry>
  
  <entry>
    <title>ImageDataGenerator</title>
    <link href="http://c-dafan.github.io/05/15/dl_ImageDataGenerator/"/>
    <id>http://c-dafan.github.io/05/15/dl_ImageDataGenerator/</id>
    <published>2019-05-15T02:03:53.000Z</published>
    <updated>2019-05-15T02:20:06.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="keras官方文档"><a href="#keras官方文档" class="headerlink" title="keras官方文档"></a><a href="https://keras.io/zh/preprocessing/image/" target="_blank" rel="external">keras官方文档</a></h2><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;keras官方文档&quot;&gt;&lt;a href=&quot;#keras官方文档&quot; class=&quot;headerlink&quot; title=&quot;keras官方文档&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://keras.io/zh/preprocessing/image/&quot; target=&quot;
    
    </summary>
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/tags/deeplearn/"/>
    
      <category term="keras" scheme="http://c-dafan.github.io/tags/keras/"/>
    
  </entry>
  
  <entry>
    <title>easy_install--打脸python爱好者</title>
    <link href="http://c-dafan.github.io/05/13/python_easy-install/"/>
    <id>http://c-dafan.github.io/05/13/python_easy-install/</id>
    <published>2019-05-12T23:59:23.000Z</published>
    <updated>2019-05-13T00:22:58.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easy-install的使用"><a href="#easy-install的使用" class="headerlink" title="easy_install的使用"></a>easy_install的使用</h3><p>作为python爱好者，竟然不知道有easy_install 的存在，简直是打脸。习惯使用pip或者conda，从来没注意过easy_install的存在。</p>
<p>可能大家都遇到过一个同样的问题，pip更新失败。这是一个非常让人恶心的问题，曾一度因为pip更新失败重装python环境。</p>
<p>有easy_install 再也不用担心pip更新失败的问题了。</p>
<p>easy_install的使用：</p>
<blockquote>
<p>安装包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pip(包名)</div></pre></td></tr></table></figure>
<blockquote>
<p>更新包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install -U pip(包名)</div></pre></td></tr></table></figure>
<blockquote>
<p>指定版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pip=1.19(=版本号)</div></pre></td></tr></table></figure>
<h3 id="pip更新失败，解决方案"><a href="#pip更新失败，解决方案" class="headerlink" title="pip更新失败，解决方案"></a>pip更新失败，解决方案</h3><blockquote>
<p>easy_install</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install -U pip</div></pre></td></tr></table></figure>
<blockquote>
<p>conda</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda update pip</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;easy-install的使用&quot;&gt;&lt;a href=&quot;#easy-install的使用&quot; class=&quot;headerlink&quot; title=&quot;easy_install的使用&quot;&gt;&lt;/a&gt;easy_install的使用&lt;/h3&gt;&lt;p&gt;作为python爱好者，竟然不知道有
    
    </summary>
    
      <category term="python" scheme="http://c-dafan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://c-dafan.github.io/tags/python/"/>
    
      <category term="conda" scheme="http://c-dafan.github.io/tags/conda/"/>
    
      <category term="模块管理， pip" scheme="http://c-dafan.github.io/tags/%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%EF%BC%8C-pip/"/>
    
  </entry>
  
  <entry>
    <title>ocrDeepLearn</title>
    <link href="http://c-dafan.github.io/05/09/dl_ocrDeepLearn/"/>
    <id>http://c-dafan.github.io/05/09/dl_ocrDeepLearn/</id>
    <published>2019-05-09T13:05:35.000Z</published>
    <updated>2019-06-03T06:10:14.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/c-dafan/CharRecognition" target="_blank" rel="external">crnn</a></p>
<h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><p><a href="">TextBoxes:A Fast Text Detector with a Single Deep Neural Network</a></p>
<p><a href="">Detecting Oriented Text in Natural Images by Linking Segments</a></p>
<p><a href="">EAST: An Efficient and Accurate Scene Text Detector</a></p>
<p><a href="">PixelLink: Detecting Scene Text via Instance Segmentation</a></p>
<p><a href="">Gated Recurrent Convolution Neural Network forOCR</a></p>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p><a href="">ICDAR 2011</a></p>
<p><a href="">ICDAR 2013</a></p>
<p><a href="">ICDAR 2015 Incidental Text</a></p>
<p><a href="">Street View Text</a></p>
<p><a href="">SynthText</a></p>
<p><a href="">MSRA-TD500</a></p>
<p><a href="">COCO-Text </a></p>
<p><a href="">IIIT5K</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/lillylin/p/6893500.html" target="_blank" rel="external">https://www.cnblogs.com/lillylin/p/6893500.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/c-dafan/CharRecognition&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/tags/deeplearn/"/>
    
      <category term="ocr" scheme="http://c-dafan.github.io/tags/ocr/"/>
    
      <category term="笔记" scheme="http://c-dafan.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>goTrick</title>
    <link href="http://c-dafan.github.io/05/08/goTrick/"/>
    <id>http://c-dafan.github.io/05/08/goTrick/</id>
    <published>2019-05-08T13:19:19.000Z</published>
    <updated>2019-05-08T13:20:12.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译后台执行程序"><a href="#编译后台执行程序" class="headerlink" title="编译后台执行程序"></a>编译后台执行程序</h2><p>go build -ldflags “-H=windowsgui”    example.go</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译后台执行程序&quot;&gt;&lt;a href=&quot;#编译后台执行程序&quot; class=&quot;headerlink&quot; title=&quot;编译后台执行程序&quot;&gt;&lt;/a&gt;编译后台执行程序&lt;/h2&gt;&lt;p&gt;go build -ldflags “-H=windowsgui”    example.g
    
    </summary>
    
      <category term="go" scheme="http://c-dafan.github.io/categories/go/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="trick" scheme="http://c-dafan.github.io/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>log4go用户指导</title>
    <link href="http://c-dafan.github.io/04/26/log4go%E7%94%A8%E6%88%B7%E6%8C%87%E5%AF%BC/"/>
    <id>http://c-dafan.github.io/04/26/log4go用户指导/</id>
    <published>2019-04-26T06:52:41.000Z</published>
    <updated>2019-04-27T15:24:13.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/c-dafan/<span class="built_in">log</span>4go</div></pre></td></tr></table></figure>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> l4g <span class="string">"github.com/c-dafan/log4go"</span></div></pre></td></tr></table></figure>
<h3 id="获取logger"><a href="#获取logger" class="headerlink" title="获取logger"></a>获取logger</h3><h4 id="全局-logger"><a href="#全局-logger" class="headerlink" title="全局 logger"></a>全局 logger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l4g.Info(<span class="string">"hello world"</span>)</div><div class="line"><span class="keyword">defer</span> l4g.Close()</div></pre></td></tr></table></figure>
<h4 id="新建默认logger-NewDefaultLogger"><a href="#新建默认logger-NewDefaultLogger" class="headerlink" title="新建默认logger NewDefaultLogger"></a>新建默认logger NewDefaultLogger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log := l4g.NewDefaultLogger(l4g.INFO)</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div><div class="line"><span class="keyword">defer</span> log.Close()</div></pre></td></tr></table></figure>
<h4 id="新建logger-l4g-Logger"><a href="#新建logger-l4g-Logger" class="headerlink" title="新建logger l4g.Logger"></a>新建logger l4g.Logger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<h3 id="添加过滤器"><a href="#添加过滤器" class="headerlink" title="添加过滤器"></a>添加过滤器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p>通过AddFilter函数添加过滤器，<br>AddFilter(name, level, writer)<br>第一个参数： 过滤器名字，随意， 只要不重复就行<br>第二个参数： 日志级别<br>第三个参数： 输出器</p>
<h3 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">l4g.Finest()</div><div class="line">l4g.Fine()</div><div class="line">l4g.Debug()</div><div class="line">l4g.Trace()</div><div class="line">l4g.Info()</div><div class="line">l4g.Warning()</div><div class="line">l4g.Error()</div><div class="line">l4g.Critical()</div></pre></td></tr></table></figure>
<p>对应于不同级别</p>
<h2 id="user-guide"><a href="#user-guide" class="headerlink" title="user guide"></a>user guide</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FINEST</div><div class="line">FINE</div><div class="line">DEBUG</div><div class="line">TRACE</div><div class="line">INFO</div><div class="line">WARNING</div><div class="line">ERROR</div><div class="line">CRITICAL</div></pre></td></tr></table></figure>
<h3 id="writer"><a href="#writer" class="headerlink" title="writer"></a>writer</h3><h4 id="输出到控制台的writer"><a href="#输出到控制台的writer" class="headerlink" title="输出到控制台的writer"></a>输出到控制台的writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<h4 id="输出到文件的writer"><a href="#输出到文件的writer" class="headerlink" title="输出到文件的writer"></a>输出到文件的writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line">flw := l4g.NewFileLogWriter(filename, <span class="literal">false</span>)</div><div class="line"></div><div class="line"><span class="comment">//		 %T - Time (15:04:05 MST)</span></div><div class="line"><span class="comment">//       %t - Time (15:04)</span></div><div class="line"><span class="comment">//       %D - Date (2006/01/02)</span></div><div class="line"><span class="comment">//       %d - Date (01/02/06)</span></div><div class="line"><span class="comment">//       %L - Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT)</span></div><div class="line"><span class="comment">//       %S - Source</span></div><div class="line"><span class="comment">//       %M - Message</span></div><div class="line"><span class="comment">//       It ignores unknown format strings (and removes them)</span></div><div class="line"><span class="comment">//       Recommended: "[%D %T] [%L] (%S) %M"</span></div><div class="line"></div><div class="line">flw.SetFormat(<span class="string">"[%D %T] [%L] (%S) %M"</span>)</div><div class="line">flw.SetRotate(<span class="literal">false</span>)</div><div class="line">flw.SetRotateSize(<span class="number">0</span>)</div><div class="line">flw.SetRotateLines(<span class="number">0</span>)</div><div class="line">flw.SetRotateDaily(<span class="literal">false</span>)</div><div class="line">flw.SetRotateMaxBackup(<span class="number">999</span>)</div><div class="line">log.AddFilter(<span class="string">"file"</span>, l4g.FINE, flw)</div></pre></td></tr></table></figure>
<blockquote>
<p>NewFileLogWriter(filename string, rotate bool)</p>
</blockquote>
<p>日志文件名字，是否多文件</p>
<blockquote>
<p>SetFormat(format string)</p>
</blockquote>
<p>设置输出格式</p>
<blockquote>
<p>flw.SetHeadFoot(head string, foot string)</p>
</blockquote>
<p>日志头和脚</p>
<blockquote>
<p>SetRotate(rotate bool)</p>
</blockquote>
<p>设置是否多文件，需要和NewFileLogWriter一致</p>
<blockquote>
<p>SetRotateSize(maxsize int)</p>
</blockquote>
<p>设置一个文件大小， 0不限制</p>
<blockquote>
<p>SetRotateLines(maxlines int)</p>
</blockquote>
<p>设置一个文件多少行， 0不限制</p>
<blockquote>
<p>SetRotateDaily(daily bool)</p>
</blockquote>
<p>每天一个日志文件</p>
<blockquote>
<p>SetRotateMaxBackup(maxbackup int)</p>
</blockquote>
<p>默认999， 最多多少个日志文件</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>stdout<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>console<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- level is (:?FINEST|FINE|DEBUG|TRACE|INFO|WARNING|ERROR) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>file<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>file<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>FINEST<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span>test&#123;&#125;.log<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">       %T - Time (15:04:05 MST)</div><div class="line">       %t - Time (15:04)</div><div class="line">       %D - Date (2006/01/02)</div><div class="line">       %d - Date (01/02/06)</div><div class="line">       %L - Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT)</div><div class="line">       %S - Source</div><div class="line">       %M - Message</div><div class="line">       It ignores unknown format strings (and removes them)</div><div class="line">       Recommended: "[%D %T] [%L] (%S) %M"</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span>&gt;</span>[%D %T] [%L] (%S) %M<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rotate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- true enables log rotation, otherwise append --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxsize"</span>&gt;</span>0M<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- \d+[KMG]? Suffixes are in terms of 2**10 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxlines"</span>&gt;</span>0K<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- \d+[KMG]? Suffixes are in terms of thousands --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxbackup"</span>&gt;</span>999<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daily"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- Automatically rotates when a log message is written after midnight --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logging</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/c-dafan/log4go/blob/master/examples/example.json" target="_blank" rel="external">example.json</a></p>
<h4 id="配置文件导入"><a href="#配置文件导入" class="headerlink" title="配置文件导入"></a>配置文件导入</h4><p><a href="https://github.com/c-dafan/log4go/blob/master/examples/XMLConfigurationExample.go" target="_blank" rel="external">XMLConfigurationExample.go</a></p>
<p><a href="https://github.com/c-dafan/log4go/blob/master/examples/JsonConfigExample.go" target="_blank" rel="external">JsonConfigExample.go</a></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>日志输出用的是go线程，一旦主线程结束，go线程也会跟着结束，所以go线程中没有运行完的，会直接停止。这个样子</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;quick-start&quot;&gt;&lt;a href=&quot;#quick-start&quot; class=&quot;headerlink&quot; title=&quot;quick start&quot;&gt;&lt;/a&gt;quick start&lt;/h2&gt;&lt;h3 id=&quot;获取&quot;&gt;&lt;a href=&quot;#获取&quot; class=&quot;head
    
    </summary>
    
      <category term="go" scheme="http://c-dafan.github.io/categories/go/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="日志" scheme="http://c-dafan.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>图像分割学习总结</title>
    <link href="http://c-dafan.github.io/04/25/dl_%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://c-dafan.github.io/04/25/dl_图像分割学习总结/</id>
    <published>2019-04-25T13:01:07.000Z</published>
    <updated>2019-04-26T05:09:12.999Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下连续写了两个肿瘤分割（图像分割）的感觉。与一路走过的坑。</p>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><h3 id="fcn"><a href="#fcn" class="headerlink" title="fcn"></a>fcn</h3><p>用vgg16的权重，省去训练前几层的麻烦，但是模型很大，如果真的要训练前几层，没有个8g显存别想着训练。</p>
<h3 id="unet"><a href="#unet" class="headerlink" title="unet"></a>unet</h3><p>模型很大，让我很头疼，950显卡batch_size=1也放不下，没办法，借用的1080 loss还不下降。除了最后一层，剩下的卷积层后都加上Batch Normalization，很有用。效果挺好的一个模型，相对新模型来说，采用的还是堆积式，深度相对较小，模型相对较大。</p>
<h3 id="densenet-fcn"><a href="#densenet-fcn" class="headerlink" title="densenet fcn"></a>densenet fcn</h3><p>模型相对挺小，至少950显卡可以训练。采用的是反卷积而不是upsample。</p>
<h3 id="enet"><a href="#enet" class="headerlink" title="enet"></a>enet</h3><p>模型相对挺小，效果很挺不错。</p>
<h2 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h2><h3 id="loss函数"><a href="#loss函数" class="headerlink" title="loss函数"></a>loss函数</h3><p>loss函数的定义，对结果有着很大的影响。会影响的学习方向</p>
<p>常见loss函数</p>
<ul>
<li>dice_loss (1 - dice) </li>
<li>加权loss  一般mask图中，都是1少0多</li>
</ul>
<p>使用diceloss比较好，加权的比例不好控制，diceloss关注于标注部分，比较好。</p>
<h3 id="loss不下降"><a href="#loss不下降" class="headerlink" title="loss不下降"></a>loss不下降</h3><p>记录下解决方案。</p>
<ul>
<li>加Batch Normalization, 加Batch Normalization很管用，尤其是数据没有归一化的时候。</li>
<li>数据归一化。</li>
<li>调整模型，和图像大小相等的featuremap最好不用</li>
<li>优化函数，学习率。会影响一点</li>
<li>随机乱序，在最后抖动的时候，会很稳定</li>
</ul>
<h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>归一化对模型的影响，真的是很大。</p>
<h3 id="数据加强"><a href="#数据加强" class="headerlink" title="数据加强"></a>数据加强</h3><p>可以扩充数据</p>
<h3 id="随机乱序"><a href="#随机乱序" class="headerlink" title="随机乱序"></a>随机乱序</h3><p>batch——size小，并且没有随机乱序的话，模型会学习到一个局部的数据，模型鲁棒性低。随机乱序对模型有很大的作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下连续写了两个肿瘤分割（图像分割）的感觉。与一路走过的坑。&lt;/p&gt;
&lt;h2 id=&quot;model&quot;&gt;&lt;a href=&quot;#model&quot; class=&quot;headerlink&quot; title=&quot;model&quot;&gt;&lt;/a&gt;model&lt;/h2&gt;&lt;h3 id=&quot;fcn&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://c-dafan.github.io/tags/deeplearn/"/>
    
      <category term="总结" scheme="http://c-dafan.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="训练技巧" scheme="http://c-dafan.github.io/tags/%E8%AE%AD%E7%BB%83%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>go网络编程</title>
    <link href="http://c-dafan.github.io/04/22/goNetWorkCode/"/>
    <id>http://c-dafan.github.io/04/22/goNetWorkCode/</id>
    <published>2019-04-22T13:00:47.000Z</published>
    <updated>2019-04-23T02:14:21.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h2><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line"><span class="keyword">defer</span> listener.Close()</div></pre></td></tr></table></figure>
<h3 id="客户端发送请求链接"><a href="#客户端发送请求链接" class="headerlink" title="客户端发送请求链接"></a>客户端发送请求链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line"><span class="keyword">defer</span> conn.Close()</div></pre></td></tr></table></figure>
<h3 id="接受客户端请求链接"><a href="#接受客户端请求链接" class="headerlink" title="接受客户端请求链接"></a>接受客户端请求链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conn, err := listener.Accept()</div><div class="line"><span class="keyword">defer</span> conn.Close()</div></pre></td></tr></table></figure>
<h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">n, err := conn.Read(buffer)</div></pre></td></tr></table></figure>
<h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n, err = conn.Write([]<span class="keyword">byte</span>(。。。))</div></pre></td></tr></table></figure>
<h2 id="server处理单client"><a href="#server处理单client" class="headerlink" title="server处理单client"></a>server处理单client</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> listener.Close()</div><div class="line">	buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	conn, err := listener.Accept()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(conn.RemoteAddr())</div><div class="line">	n, err := conn.Read(buffer)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="keyword">string</span>(buffer[:n]))</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	content := <span class="string">"hello world"</span></div><div class="line">	n, err := conn.Write([]<span class="keyword">byte</span>(content))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="server并发处理多client，并保持链接状态"><a href="#server并发处理多client，并保持链接状态" class="headerlink" title="server并发处理多client，并保持链接状态"></a>server并发处理多client，并保持链接状态</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>这是使用了go开启一个线程， 当有新的client链接时，都会开启一个go程。<br>如果把go去掉，只能处理单个client，当多个client请求链接时，只有第一个和server保持链接。其余的都在等待状态。有个教学视频说会被替换，经过测试，当不使用go时，线程会被阻塞到读取的位置，只是其余的client在等待，第一个链接的不会被替换。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> listener.Close()</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		conn, err := listener.Accept()</div><div class="line">		<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</div><div class="line">			fmt.Println(err)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">go</span> handle(conn)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(conn net.Conn)</span></span> &#123;</div><div class="line">	fmt.Println(conn.RemoteAddr())</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line">		n, err := conn.Read(buffer)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		content := strings.Trim(<span class="keyword">string</span>(buffer[:n]), <span class="string">" \r\n"</span>)</div><div class="line">		fmt.Println(n, content)</div><div class="line">		<span class="keyword">if</span> content == <span class="string">"exit"</span>&#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		fmt.Println(time.Now())</div><div class="line">		n, err = conn.Write([]<span class="keyword">byte</span>(time.Now().String()))</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h3><p>输入exit退出</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			str := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">			n, err := os.Stdin.Read(str)</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">				fmt.Println(err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">			n, err = conn.Write(str[:n])</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				fmt.Println(err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line">		n, err := conn.Read(buf)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">			fmt.Println(err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		fmt.Println(<span class="keyword">string</span>(buf[:n]))</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;连接过程&quot;&gt;&lt;a href=&quot;#连接过程&quot; class=&quot;headerlink&quot; title=&quot;连接过程&quot;&gt;&lt;/a&gt;连接过程&lt;/h2&gt;&lt;h3 id=&quot;监听端口&quot;&gt;&lt;a href=&quot;#监听端口&quot; class=&quot;headerlink&quot; title=&quot;监听端口&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="go" scheme="http://c-dafan.github.io/categories/go/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="网络编程" scheme="http://c-dafan.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="计算机网络" scheme="http://c-dafan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>go并发</title>
    <link href="http://c-dafan.github.io/04/17/go%E5%B9%B6%E5%8F%91/"/>
    <id>http://c-dafan.github.io/04/17/go并发/</id>
    <published>2019-04-17T10:48:03.000Z</published>
    <updated>2019-04-22T07:03:17.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道-channel"><a href="#管道-channel" class="headerlink" title="管道 channel"></a>管道 channel</h2><h3 id="关闭管道"><a href="#关闭管道" class="headerlink" title="关闭管道"></a>关闭管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++&#123;</div><div class="line">			ch &lt;- i</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="comment">// for &#123;</span></div><div class="line">	<span class="comment">// 	i, ok := &lt;-ch</span></div><div class="line">	<span class="comment">// 	if ok&#123;</span></div><div class="line">	<span class="comment">// 		fmt.Println(i)</span></div><div class="line">	<span class="comment">// 	&#125;else&#123;</span></div><div class="line">	<span class="comment">// 		break</span></div><div class="line">	<span class="comment">// 	&#125;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="comment">// for i, ok := &lt;-ch; ok;i, ok = &lt;-ch &#123;</span></div><div class="line">	<span class="comment">// 	fmt.Println(i)</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> ch&#123;</div><div class="line">		fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过close可以关闭管道，关闭后，不能写入东西，不能读取。可以通过ok判断。也可以通过range遍历</p>
<h3 id="单向管道"><a href="#单向管道" class="headerlink" title="单向管道"></a>单向管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">var</span> readch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = ch</div><div class="line">	<span class="keyword">var</span> writech <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = ch</div><div class="line">	<span class="comment">// writech&lt;- 0</span></div><div class="line">	<span class="comment">// fmt.Println(&lt;-readch)</span></div><div class="line">	<span class="comment">// readch &lt;- 0 编译不通过</span></div><div class="line">	<span class="comment">// &lt;- writech 编译不通过</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++&#123;</div><div class="line">			writech &lt;- i</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> readch&#123;</div><div class="line">		fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有无缓冲管道"><a href="#有无缓冲管道" class="headerlink" title="有无缓冲管道"></a>有无缓冲管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</div><div class="line">	<span class="comment">// ch := make(chan int)</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</div><div class="line">			ch &lt;- i</div><div class="line">			fmt.Println(<span class="string">"生成："</span>,i)</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> ch&#123;</div><div class="line">		fmt.Println(<span class="string">"消费："</span>,i)</div><div class="line">		time.Sleep(time.Second)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到有缓冲管道在装满时，阻塞。</p>
<h2 id="runtime的使用"><a href="#runtime的使用" class="headerlink" title="runtime的使用"></a>runtime的使用</h2><h3 id="让出时间片"><a href="#让出时间片" class="headerlink" title="让出时间片"></a>让出时间片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</div><div class="line">			fmt.Println(<span class="string">"go"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">2</span>;i++&#123;</div><div class="line">		fmt.Println(<span class="string">"hello"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程运行结束，go协程运行没有结束，就会被自动关闭。会没有go的输出。让出时间片，就可以看到go协程的输出。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">3</span>;i++&#123;</div><div class="line">			fmt.Println(<span class="string">"go"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">2</span>;i++&#123;</div><div class="line">		runtime.Gosched() <span class="comment">// 让出时间片</span></div><div class="line">		fmt.Println(<span class="string">"hello"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="退出子线程"><a href="#退出子线程" class="headerlink" title="退出子线程"></a>退出子线程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"cc"</span>)</div><div class="line">	<span class="comment">// return  </span></div><div class="line">	<span class="comment">// runtime.Goexit()</span></div><div class="line">	fmt.Println(<span class="string">"dd"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">		fmt.Println(<span class="string">"aa"</span>)</div><div class="line">		test()</div><div class="line">		fmt.Println(<span class="string">"bb"</span>)</div><div class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">			ch &lt;- <span class="number">0</span></div><div class="line">		&#125;(ch)</div><div class="line">	&#125;(ch)</div><div class="line">	&lt;-ch</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br>        aa<br>        dd<br>        cc<br>        bb</p>
<p>取消return的注释后， 会输出：<br>        aa<br>        cc<br>        bb</p>
<p>由此说明，return退出的是函数</p>
<p>取消 runtime.Goexit() 的注释，会输出：<br>        aa<br>        cc</p>
<p>说明退出了整个线程</p>
<h3 id="最大并行数"><a href="#最大并行数" class="headerlink" title="最大并行数"></a>最大并行数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n := runtime.GOMAXPROCS(<span class="number">4</span>)</div><div class="line">	fmt.Println(n)</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">go</span> fmt.Print(<span class="string">"0"</span>)</div><div class="line">		fmt.Print(<span class="number">1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="time的使用"><a href="#time的使用" class="headerlink" title="time的使用"></a>time的使用</h2><h3 id="定时器的创建"><a href="#定时器的创建" class="headerlink" title="定时器的创建"></a>定时器的创建</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	timer := time.NewTimer(<span class="number">2</span> * time.Second)</div><div class="line">	fmt.Println(<span class="string">"时间"</span>,time.Now())</div><div class="line"></div><div class="line">	t := &lt;-timer.C</div><div class="line">	fmt.Println(t)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定时2秒钟。</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	time.Sleep(<span class="number">2</span>* time.Second)</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	&lt;-time.After(<span class="number">2</span>*time.Second)</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	timer := time.NewTimer(time.Second)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		&lt;-timer.C</div><div class="line">		fmt.Println(<span class="string">"携程关闭"</span>)</div><div class="line">	&#125;()</div><div class="line">	<span class="comment">// timer.Stop()</span></div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>取消timer.Stop()的注释，子线程将不会结束。因为在stop以后，timer.C 管道中不会有信息。</p>
<h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	timer := time.NewTimer(<span class="number">3</span> * time.Second)</div><div class="line">	timer.Reset(time.Second)</div><div class="line">	&lt;-timer.C</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新设置定时器时间</p>
<h3 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ticker := time.NewTicker(time.Second)</div><div class="line">	i:= <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</div><div class="line">		fmt.Println(<span class="string">"i="</span>,i)</div><div class="line">		i ++</div><div class="line">		<span class="keyword">if</span> i ==<span class="number">5</span>&#123;</div><div class="line">			ticker.Stop()</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以多次使用的定时器</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;管道-channel&quot;&gt;&lt;a href=&quot;#管道-channel&quot; class=&quot;headerlink&quot; title=&quot;管道 channel&quot;&gt;&lt;/a&gt;管道 channel&lt;/h2&gt;&lt;h3 id=&quot;关闭管道&quot;&gt;&lt;a href=&quot;#关闭管道&quot; class=&quot;head
    
    </summary>
    
      <category term="go" scheme="http://c-dafan.github.io/categories/go/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="并发" scheme="http://c-dafan.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>conda大坑</title>
    <link href="http://c-dafan.github.io/04/13/python_conda%E5%A4%A7%E5%9D%91/"/>
    <id>http://c-dafan.github.io/04/13/python_conda大坑/</id>
    <published>2019-04-13T05:29:41.000Z</published>
    <updated>2019-05-13T00:01:17.173Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>记录一个遇到的坑。是非常的坑的坑。 –conda的使用</p>
<hr>
<h2 id="conda坑"><a href="#conda坑" class="headerlink" title="conda坑"></a>conda坑</h2><h3 id="conda-install"><a href="#conda-install" class="headerlink" title="conda install"></a>conda install</h3><p>conda的强大，一直也听说过，只是没想到如此的强大。只是想安装一个包，把我的整个python环境全都给我替换了。</p>
<p>我只是想装一下gdcm，但是py37没有这个包，所以pip显示没有匹配到。本着尝试的想法，用conda install，结果把整个环境从python37升级到了py36，（没错是升级，conda是这么提醒的）。当我发现有问题时，非常的绝望，但是怂，只能静悄悄的看着进度条走了半个小时。</p>
<p>结果不错所料，完全不能用了。conda强大到让你绝望中，又有了希望。居然还可以回滚。见回滚使用。</p>
<h2 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install -n your_env_name [package]</div></pre></td></tr></table></figure>
<p>默认装在root下。奇坑，小心着用。</p>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n your_env_name python=X.X（2.7、3.6等)</div></pre></td></tr></table></figure>
<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda list --revision</div><div class="line">conda install --version N</div></pre></td></tr></table></figure>
<p>N为回退的版本。</p>
<p><a href="https://www.jianshu.com/p/97d3fc248cbb" target="_blank" rel="external">参考</a></p>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple/</a></p>
<p>中国科技大学: <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="external">http://pypi.hustunique.com/</a></p>
<p>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="external">http://pypi.sdutlinux.org/</a> </p>
<p>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a></p>
<p>以后还是使用pip</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;记录一个遇到的坑。是非常的坑的坑。 –conda的使用&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;conda坑&quot;&gt;&lt;a href=&quot;#conda坑&quot; class=&quot;headerlink&quot; title=&quot;conda坑&quot;&gt;&lt;/a&gt;conda坑&lt;/h2&gt;&lt;h3 id=&quot;cond
    
    </summary>
    
      <category term="python" scheme="http://c-dafan.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://c-dafan.github.io/tags/python/"/>
    
      <category term="conda" scheme="http://c-dafan.github.io/tags/conda/"/>
    
      <category term="奇坑" scheme="http://c-dafan.github.io/tags/%E5%A5%87%E5%9D%91/"/>
    
      <category term="pip" scheme="http://c-dafan.github.io/tags/pip/"/>
    
      <category term="模块管理" scheme="http://c-dafan.github.io/tags/%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Lightsocks环境配置</title>
    <link href="http://c-dafan.github.io/04/12/go_Lightsocks%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://c-dafan.github.io/04/12/go_Lightsocks环境配置/</id>
    <published>2019-04-12T01:03:48.000Z</published>
    <updated>2019-04-12T03:55:55.306Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/gwuhaolin/blog/issues/12" target="_blank" rel="external">你也能写个 Shadowsocks</a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>通过SOCKS5代理，<a href="https://github.com/gwuhaolin/lightsocks" target="_blank" rel="external">代码见</a>,</p>
<p>代码运行方法很简单，先运行server然后运行local，但是现在有个问题，如何才能让访问通过local的端口发出呢？<br>这个可以通过浏览器设置代理ip和端口，把代理ip和端口设置成local监听的端口，然后就可以访问到local。设置方法：</p>
<ul>
<li>这里使用的是chrome，</li>
<li>进入设置</li>
<li>进入高级设置</li>
<li>代理设置</li>
<li>这时候会弹出系统弹出窗</li>
<li>局域网（LAN）设置</li>
<li>在新的弹出窗可以看到</li>
</ul>
<p>现在可以访问local了，local也可以把数据转发到server，但是现在还有一个问题。server是直接把链接断掉，因为这个使用SOCKS5，server发现不是SOCKS5后，就丢弃了。local只是直接做了转发，需要浏览器直接设置为SOCKS5代理。</p>
<ul>
<li>这个使用的是chrome，需要一个插件</li>
<li>下载插件<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="external">SwitchyOmega</a></li>
<li>进入扩展程序，打开开发者模式，把下载的crx文件直接拖进去就可以直接安装了</li>
<li>进入SwitchyOmega界面，</li>
<li>新建模式，填写协议，ip：port</li>
<li>应用选项。</li>
</ul>
<h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><p>在代码中，可见server.go 文件。在文件中，handleConn方法主要做转发处理。所以这里对handleConn方法，这修改就可以了。</p>
<h3 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h3><p>我这里需要建立链接的日志，日志内容包括时间和源ip与目标ip。做一下修改就可以。</p>
<blockquote>
<p>首先修改securetcp中struct</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Addr <span class="keyword">interface</span> &#123;</div><div class="line">	Network() <span class="keyword">string</span> <span class="comment">// name of the network (for example, "tcp", "udp")</span></div><div class="line">	String() <span class="keyword">string</span>  <span class="comment">// string form of address (for example, "192.0.2.1:25", "[2001:db8::1]:80")</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 加密传输的 TCP Socket</span></div><div class="line"><span class="keyword">type</span> SecureTCPConn <span class="keyword">struct</span> &#123;</div><div class="line">	io.ReadWriteCloser</div><div class="line">	Address Addr</div><div class="line">	Cipher *cipher</div><div class="line">&#125;</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<blockquote>
<p>然后在这里输出local-&gt;server日志即可</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 进行转发</span></div><div class="line">    <span class="comment">// 从 localUser 读取数据发送到 dstServer</span></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        err := localConn.DecodeCopy(dstServer)</div><div class="line">        log.Println(time.Now(),<span class="string">"目标地址："</span>, dstServer.RemoteAddr(),<span class="string">"源地址："</span>, localConn.Address) <span class="comment">// 增加</span></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="comment">// 在 copy 的过程中可能会存在网络超时等 error 被 return，只要有一个发生了错误就退出本次工作</span></div><div class="line">            localConn.Close()</div><div class="line">            dstServer.Close()</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<blockquote>
<p>server -&gt; local 日志 需要做以下修改</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(&amp;SecureTCPConn&#123;</div><div class="line">		Cipher:          localConn.Cipher,</div><div class="line">		Address: dstServer.RemoteAddr(),</div><div class="line">		ReadWriteCloser: dstServer,</div><div class="line">	&#125;).EncodeCopyServer(localConn) <span class="comment">// 把EncodeCopy改为EncodeCopyServer方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在securetcp创建EncodeCopyServer方法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(secureSocket *SecureTCPConn)</span> <span class="title">EncodeCopyServer</span><span class="params">(dst *SecureTCPConn)</span> <span class="title">error</span></span> &#123;</div><div class="line">	log.Println(time.Now(),<span class="string">"目标地址："</span>, dst.Address,<span class="string">"源地址："</span>, secureSocket.Address)</div><div class="line">	<span class="keyword">return</span> secureSocket.EncodeCopy(dst)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行，可以看到有日志的输出。</p>
<h2 id="修改后代码可见github"><a href="#修改后代码可见github" class="headerlink" title="修改后代码可见github"></a>修改后代码可见<a href="https://github.com/c-dafan/lightsocks" target="_blank" rel="external">github</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/gwuhaolin/blog/issues/12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你也能写个 Shadowsocks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境
    
    </summary>
    
      <category term="计算机网络" scheme="http://c-dafan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="代理" scheme="http://c-dafan.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>NAT一探究竟</title>
    <link href="http://c-dafan.github.io/04/10/NAT%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F/"/>
    <id>http://c-dafan.github.io/04/10/NAT一探究竟/</id>
    <published>2019-04-10T05:39:04.000Z</published>
    <updated>2019-04-10T06:19:25.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直好奇socket在内网情况下，是如何和外网链接的。<br>如果都是私有ip还好理解，可以相互通信。但是公有ip都可以用，数据是怎么返回就成了一个迷。</p>
<p>由于最近需要抓取内网与外网交换的数据包，涉及到了内网ip与外网ip的转化，之前用的代理软件把ip给隐藏掉了，看不到是谁发过来的信息。需要自己编写一个代理软件，涉及到socket，顺便把NAT也探究一下。</p>
<h2 id="NAT基本原理及应用"><a href="#NAT基本原理及应用" class="headerlink" title="NAT基本原理及应用"></a><a href="https://blog.csdn.net/u013597671/article/details/74275852" target="_blank" rel="external">NAT基本原理及应用</a></h2><p>标题是外部链接</p>
<p><img src="/uploads/natdemo.jpg" alt="nat转换图"></p>
<h2 id="P2P，UDP和TCP穿透NAT"><a href="#P2P，UDP和TCP穿透NAT" class="headerlink" title="P2P，UDP和TCP穿透NAT"></a><a href="https://blog.csdn.net/leisure512/article/details/4900191" target="_blank" rel="external">P2P，UDP和TCP穿透NAT</a></h2><p>标题是外部链接</p>
<h2 id="搭建NAT服务器"><a href="#搭建NAT服务器" class="headerlink" title="搭建NAT服务器"></a>搭建NAT服务器</h2><p>先记下，等有了两个网卡，在尝试。</p>
<p><a href="https://www.cnblogs.com/wonux/p/5555953.html" target="_blank" rel="external">Linux服务器</a></p>
<p><a href="https://jingyan.baidu.com/article/3c343ff7e962840d3679637b.html" target="_blank" rel="external">Win服务器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直好奇socket在内网情况下，是如何和外网链接的。&lt;br&gt;如果都是私有ip还好理解，可以相互通信。但是公有ip都可以用，数据是怎么返回就
    
    </summary>
    
      <category term="计算机网络" scheme="http://c-dafan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="NAT" scheme="http://c-dafan.github.io/tags/NAT/"/>
    
      <category term="socket" scheme="http://c-dafan.github.io/tags/socket/"/>
    
      <category term="代理" scheme="http://c-dafan.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="VPN" scheme="http://c-dafan.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>网络代理分析</title>
    <link href="http://c-dafan.github.io/04/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%88%86%E6%9E%90%E7%BC%96%E5%86%99/"/>
    <id>http://c-dafan.github.io/04/10/网络代理分析编写/</id>
    <published>2019-04-10T00:00:31.000Z</published>
    <updated>2019-04-10T05:42:18.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p><img src="/uploads/抓包.png" alt="数据包"></p>
<p>http 是通过tcp进行传输的， socket又是tcp的抽象，http直接通过socket就可以传输。<br>做代理的话，不用管http，直接socket转发就可以。http会自己根据多个tcp组装起一个完整的<br>数据。</p>
<p>抓包时，不小心抓到了https。https通过ssl传输。通过查找，比较同意<a href="https://www.jianshu.com/p/5ee027c51af0" target="_blank" rel="external">这个说法</a>。<br>在https与tcp之间，SSL在技术上位于应用层，但从开发者的角度看，它是一个提供TCP服务的运输层协议。</p>
<p>不管怎么说，最终都是通过tcp传输。</p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="一个轻巧的网络混淆代理-python"><a href="#一个轻巧的网络混淆代理-python" class="headerlink" title="一个轻巧的网络混淆代理-python"></a><a href="https://github.com/linw1995/lightsocks-python" target="_blank" rel="external">一个轻巧的网络混淆代理-python</a></h3><p>python 编写，大佬就是大佬，代码不是拿来用的，简直就是<br>用来欣赏的。基本都是异步的，采用asyncio包写了很多的异步执行的方法。在代码中，网络传输用的是socket直接把数据转发，从而达到代理的作用。</p>
<h3 id="一个轻巧的网络混淆代理-go"><a href="#一个轻巧的网络混淆代理-go" class="headerlink" title="一个轻巧的网络混淆代理-go"></a><a href="https://github.com/gwuhaolin/lightsocks" target="_blank" rel="external">一个轻巧的网络混淆代理-go</a></h3><p>go 编写， 想法的提出者，一篇博客详细介绍了如何编写一个<a href="https://github.com/gwuhaolin/blog/issues/12" target="_blank" rel="external">Shadowsocks</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过分析抓取的数据包与混淆代理代码，收获不少。之前一直把socket当作应用层，现在才发现socket是传输层的一个抽象，http可以直接通过socket进行传输。传输方法可以参考这<a href="https://www.jianshu.com/p/36f48b6ce223" target="_blank" rel="external">一篇博客</a>。<br>加深了对传输透明的理解。不用管其他层做的事情，把对应层做好，就没得问题。</p>
<p><a href="https://www.cnblogs.com/chenliyang/p/6558756.html" target="_blank" rel="external">http与https</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;抓包分析&quot;&gt;&lt;a href=&quot;#抓包分析&quot; class=&quot;headerlink&quot; title=&quot;抓包分析&quot;&gt;&lt;/a&gt;抓包分析&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/uploads/抓包.png&quot; alt=&quot;数据包&quot;&gt;&lt;/p&gt;
&lt;p&gt;http 是通过tcp进行传输的，
    
    </summary>
    
      <category term="计算机网络" scheme="http://c-dafan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="go" scheme="http://c-dafan.github.io/tags/go/"/>
    
      <category term="socket" scheme="http://c-dafan.github.io/tags/socket/"/>
    
      <category term="python" scheme="http://c-dafan.github.io/tags/python/"/>
    
      <category term="网络" scheme="http://c-dafan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http" scheme="http://c-dafan.github.io/tags/http/"/>
    
      <category term="tcp" scheme="http://c-dafan.github.io/tags/tcp/"/>
    
  </entry>
  
</feed>
