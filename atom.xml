<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zsdf.shop/"/>
  <updated>2019-05-13T00:22:58.713Z</updated>
  <id>http://zsdf.shop/</id>
  
  <author>
    <name>da fan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>easy_install--打脸python爱好者</title>
    <link href="http://zsdf.shop/05/13/easy-install/"/>
    <id>http://zsdf.shop/05/13/easy-install/</id>
    <published>2019-05-12T23:59:23.000Z</published>
    <updated>2019-05-13T00:22:58.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easy-install的使用"><a href="#easy-install的使用" class="headerlink" title="easy_install的使用"></a>easy_install的使用</h3><p>作为python爱好者，竟然不知道有easy_install 的存在，简直是打脸。习惯使用pip或者conda，从来没注意过easy_install的存在。</p>
<p>可能大家都遇到过一个同样的问题，pip更新失败。这是一个非常让人恶心的问题，曾一度因为pip更新失败重装python环境。</p>
<p>有easy_install 再也不用担心pip更新失败的问题了。</p>
<p>easy_install的使用：</p>
<blockquote>
<p>安装包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pip(包名)</div></pre></td></tr></table></figure>
<blockquote>
<p>更新包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install -U pip(包名)</div></pre></td></tr></table></figure>
<blockquote>
<p>指定版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install pip=1.19(=版本号)</div></pre></td></tr></table></figure>
<h3 id="pip更新失败，解决方案"><a href="#pip更新失败，解决方案" class="headerlink" title="pip更新失败，解决方案"></a>pip更新失败，解决方案</h3><blockquote>
<p>easy_install</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install -U pip</div></pre></td></tr></table></figure>
<blockquote>
<p>conda</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda update pip</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;easy-install的使用&quot;&gt;&lt;a href=&quot;#easy-install的使用&quot; class=&quot;headerlink&quot; title=&quot;easy_install的使用&quot;&gt;&lt;/a&gt;easy_install的使用&lt;/h3&gt;&lt;p&gt;作为python爱好者，竟然不知道有
    
    </summary>
    
      <category term="python" scheme="http://zsdf.shop/categories/python/"/>
    
    
      <category term="python" scheme="http://zsdf.shop/tags/python/"/>
    
      <category term="模块管理， pip" scheme="http://zsdf.shop/tags/%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%EF%BC%8C-pip/"/>
    
      <category term="conda" scheme="http://zsdf.shop/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>ocrDeepLearn</title>
    <link href="http://zsdf.shop/05/09/ocrDeepLearn/"/>
    <id>http://zsdf.shop/05/09/ocrDeepLearn/</id>
    <published>2019-05-09T13:05:35.000Z</published>
    <updated>2019-05-09T13:31:15.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><p><a href="">TextBoxes:A Fast Text Detector with a Single Deep Neural Network</a></p>
<p><a href="">Detecting Oriented Text in Natural Images by Linking Segments</a></p>
<p><a href="">EAST: An Efficient and Accurate Scene Text Detector</a></p>
<p><a href="">PixelLink: Detecting Scene Text via Instance Segmentation</a></p>
<p><a href="">Gated Recurrent Convolution Neural Network forOCR</a></p>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p><a href="">ICDAR 2011</a></p>
<p><a href="">ICDAR 2013</a></p>
<p><a href="">ICDAR 2015 Incidental Text</a></p>
<p><a href="">Street View Text</a></p>
<p><a href="">SynthText</a></p>
<p><a href="">MSRA-TD500</a></p>
<p><a href="">COCO-Text </a></p>
<p><a href="">IIIT5K</a></p>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关论文&quot;&gt;&lt;a href=&quot;#相关论文&quot; class=&quot;headerlink&quot; title=&quot;相关论文&quot;&gt;&lt;/a&gt;相关论文&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;TextBoxes:A Fast Text Detector with a Single Deep N
    
    </summary>
    
      <category term="deeplearn" scheme="http://zsdf.shop/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://zsdf.shop/tags/deeplearn/"/>
    
      <category term="ocr" scheme="http://zsdf.shop/tags/ocr/"/>
    
      <category term="笔记" scheme="http://zsdf.shop/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>goTrick</title>
    <link href="http://zsdf.shop/05/08/goTrick/"/>
    <id>http://zsdf.shop/05/08/goTrick/</id>
    <published>2019-05-08T13:19:19.000Z</published>
    <updated>2019-05-08T13:20:12.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译后台执行程序"><a href="#编译后台执行程序" class="headerlink" title="编译后台执行程序"></a>编译后台执行程序</h2><p>go build -ldflags “-H=windowsgui”    example.go</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译后台执行程序&quot;&gt;&lt;a href=&quot;#编译后台执行程序&quot; class=&quot;headerlink&quot; title=&quot;编译后台执行程序&quot;&gt;&lt;/a&gt;编译后台执行程序&lt;/h2&gt;&lt;p&gt;go build -ldflags “-H=windowsgui”    example.g
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="trick" scheme="http://zsdf.shop/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>log4go用户指导</title>
    <link href="http://zsdf.shop/04/26/log4go%E7%94%A8%E6%88%B7%E6%8C%87%E5%AF%BC/"/>
    <id>http://zsdf.shop/04/26/log4go用户指导/</id>
    <published>2019-04-26T06:52:41.000Z</published>
    <updated>2019-04-27T15:24:13.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/c-dafan/<span class="built_in">log</span>4go</div></pre></td></tr></table></figure>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> l4g <span class="string">"github.com/c-dafan/log4go"</span></div></pre></td></tr></table></figure>
<h3 id="获取logger"><a href="#获取logger" class="headerlink" title="获取logger"></a>获取logger</h3><h4 id="全局-logger"><a href="#全局-logger" class="headerlink" title="全局 logger"></a>全局 logger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l4g.Info(<span class="string">"hello world"</span>)</div><div class="line"><span class="keyword">defer</span> l4g.Close()</div></pre></td></tr></table></figure>
<h4 id="新建默认logger-NewDefaultLogger"><a href="#新建默认logger-NewDefaultLogger" class="headerlink" title="新建默认logger NewDefaultLogger"></a>新建默认logger NewDefaultLogger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log := l4g.NewDefaultLogger(l4g.INFO)</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div><div class="line"><span class="keyword">defer</span> log.Close()</div></pre></td></tr></table></figure>
<h4 id="新建logger-l4g-Logger"><a href="#新建logger-l4g-Logger" class="headerlink" title="新建logger l4g.Logger"></a>新建logger l4g.Logger</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<h3 id="添加过滤器"><a href="#添加过滤器" class="headerlink" title="添加过滤器"></a>添加过滤器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p>通过AddFilter函数添加过滤器，<br>AddFilter(name, level, writer)<br>第一个参数： 过滤器名字，随意， 只要不重复就行<br>第二个参数： 日志级别<br>第三个参数： 输出器</p>
<h3 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">l4g.Finest()</div><div class="line">l4g.Fine()</div><div class="line">l4g.Debug()</div><div class="line">l4g.Trace()</div><div class="line">l4g.Info()</div><div class="line">l4g.Warning()</div><div class="line">l4g.Error()</div><div class="line">l4g.Critical()</div></pre></td></tr></table></figure>
<p>对应于不同级别</p>
<h2 id="user-guide"><a href="#user-guide" class="headerlink" title="user guide"></a>user guide</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FINEST</div><div class="line">FINE</div><div class="line">DEBUG</div><div class="line">TRACE</div><div class="line">INFO</div><div class="line">WARNING</div><div class="line">ERROR</div><div class="line">CRITICAL</div></pre></td></tr></table></figure>
<h3 id="writer"><a href="#writer" class="headerlink" title="writer"></a>writer</h3><h4 id="输出到控制台的writer"><a href="#输出到控制台的writer" class="headerlink" title="输出到控制台的writer"></a>输出到控制台的writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line"><span class="keyword">defer</span> log.Close()</div><div class="line">log.AddFilter(<span class="string">"stdout"</span>, l4g.DEBUG, l4g.NewConsoleLogWriter())</div><div class="line">log.Info(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<h4 id="输出到文件的writer"><a href="#输出到文件的writer" class="headerlink" title="输出到文件的writer"></a>输出到文件的writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">log := <span class="built_in">make</span>(l4g.Logger)</div><div class="line">flw := l4g.NewFileLogWriter(filename, <span class="literal">false</span>)</div><div class="line"></div><div class="line"><span class="comment">//		 %T - Time (15:04:05 MST)</span></div><div class="line"><span class="comment">//       %t - Time (15:04)</span></div><div class="line"><span class="comment">//       %D - Date (2006/01/02)</span></div><div class="line"><span class="comment">//       %d - Date (01/02/06)</span></div><div class="line"><span class="comment">//       %L - Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT)</span></div><div class="line"><span class="comment">//       %S - Source</span></div><div class="line"><span class="comment">//       %M - Message</span></div><div class="line"><span class="comment">//       It ignores unknown format strings (and removes them)</span></div><div class="line"><span class="comment">//       Recommended: "[%D %T] [%L] (%S) %M"</span></div><div class="line"></div><div class="line">flw.SetFormat(<span class="string">"[%D %T] [%L] (%S) %M"</span>)</div><div class="line">flw.SetRotate(<span class="literal">false</span>)</div><div class="line">flw.SetRotateSize(<span class="number">0</span>)</div><div class="line">flw.SetRotateLines(<span class="number">0</span>)</div><div class="line">flw.SetRotateDaily(<span class="literal">false</span>)</div><div class="line">flw.SetRotateMaxBackup(<span class="number">999</span>)</div><div class="line">log.AddFilter(<span class="string">"file"</span>, l4g.FINE, flw)</div></pre></td></tr></table></figure>
<blockquote>
<p>NewFileLogWriter(filename string, rotate bool)</p>
</blockquote>
<p>日志文件名字，是否多文件</p>
<blockquote>
<p>SetFormat(format string)</p>
</blockquote>
<p>设置输出格式</p>
<blockquote>
<p>flw.SetHeadFoot(head string, foot string)</p>
</blockquote>
<p>日志头和脚</p>
<blockquote>
<p>SetRotate(rotate bool)</p>
</blockquote>
<p>设置是否多文件，需要和NewFileLogWriter一致</p>
<blockquote>
<p>SetRotateSize(maxsize int)</p>
</blockquote>
<p>设置一个文件大小， 0不限制</p>
<blockquote>
<p>SetRotateLines(maxlines int)</p>
</blockquote>
<p>设置一个文件多少行， 0不限制</p>
<blockquote>
<p>SetRotateDaily(daily bool)</p>
</blockquote>
<p>每天一个日志文件</p>
<blockquote>
<p>SetRotateMaxBackup(maxbackup int)</p>
</blockquote>
<p>默认999， 最多多少个日志文件</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>stdout<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>console<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- level is (:?FINEST|FINE|DEBUG|TRACE|INFO|WARNING|ERROR) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>file<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>file<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>FINEST<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span>test&#123;&#125;.log<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">       %T - Time (15:04:05 MST)</div><div class="line">       %t - Time (15:04)</div><div class="line">       %D - Date (2006/01/02)</div><div class="line">       %d - Date (01/02/06)</div><div class="line">       %L - Level (FNST, FINE, DEBG, TRAC, WARN, EROR, CRIT)</div><div class="line">       %S - Source</div><div class="line">       %M - Message</div><div class="line">       It ignores unknown format strings (and removes them)</div><div class="line">       Recommended: "[%D %T] [%L] (%S) %M"</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span>&gt;</span>[%D %T] [%L] (%S) %M<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rotate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- true enables log rotation, otherwise append --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxsize"</span>&gt;</span>0M<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- \d+[KMG]? Suffixes are in terms of 2**10 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxlines"</span>&gt;</span>0K<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- \d+[KMG]? Suffixes are in terms of thousands --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxbackup"</span>&gt;</span>999<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daily"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- Automatically rotates when a log message is written after midnight --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logging</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/c-dafan/log4go/blob/master/examples/example.json" target="_blank" rel="external">example.json</a></p>
<h4 id="配置文件导入"><a href="#配置文件导入" class="headerlink" title="配置文件导入"></a>配置文件导入</h4><p><a href="https://github.com/c-dafan/log4go/blob/master/examples/XMLConfigurationExample.go" target="_blank" rel="external">XMLConfigurationExample.go</a></p>
<p><a href="https://github.com/c-dafan/log4go/blob/master/examples/JsonConfigExample.go" target="_blank" rel="external">JsonConfigExample.go</a></p>
<h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>日志输出用的是go线程，一旦主线程结束，go线程也会跟着结束，所以go线程中没有运行完的，会直接停止。这个样子</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;quick-start&quot;&gt;&lt;a href=&quot;#quick-start&quot; class=&quot;headerlink&quot; title=&quot;quick start&quot;&gt;&lt;/a&gt;quick start&lt;/h2&gt;&lt;h3 id=&quot;获取&quot;&gt;&lt;a href=&quot;#获取&quot; class=&quot;head
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="日志" scheme="http://zsdf.shop/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>图像分割学习总结</title>
    <link href="http://zsdf.shop/04/25/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://zsdf.shop/04/25/图像分割学习总结/</id>
    <published>2019-04-25T13:01:07.000Z</published>
    <updated>2019-04-26T05:09:12.999Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下连续写了两个肿瘤分割（图像分割）的感觉。与一路走过的坑。</p>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><h3 id="fcn"><a href="#fcn" class="headerlink" title="fcn"></a>fcn</h3><p>用vgg16的权重，省去训练前几层的麻烦，但是模型很大，如果真的要训练前几层，没有个8g显存别想着训练。</p>
<h3 id="unet"><a href="#unet" class="headerlink" title="unet"></a>unet</h3><p>模型很大，让我很头疼，950显卡batch_size=1也放不下，没办法，借用的1080 loss还不下降。除了最后一层，剩下的卷积层后都加上Batch Normalization，很有用。效果挺好的一个模型，相对新模型来说，采用的还是堆积式，深度相对较小，模型相对较大。</p>
<h3 id="densenet-fcn"><a href="#densenet-fcn" class="headerlink" title="densenet fcn"></a>densenet fcn</h3><p>模型相对挺小，至少950显卡可以训练。采用的是反卷积而不是upsample。</p>
<h3 id="enet"><a href="#enet" class="headerlink" title="enet"></a>enet</h3><p>模型相对挺小，效果很挺不错。</p>
<h2 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h2><h3 id="loss函数"><a href="#loss函数" class="headerlink" title="loss函数"></a>loss函数</h3><p>loss函数的定义，对结果有着很大的影响。会影响的学习方向</p>
<p>常见loss函数</p>
<ul>
<li>dice_loss (1 - dice) </li>
<li>加权loss  一般mask图中，都是1少0多</li>
</ul>
<p>使用diceloss比较好，加权的比例不好控制，diceloss关注于标注部分，比较好。</p>
<h3 id="loss不下降"><a href="#loss不下降" class="headerlink" title="loss不下降"></a>loss不下降</h3><p>记录下解决方案。</p>
<ul>
<li>加Batch Normalization, 加Batch Normalization很管用，尤其是数据没有归一化的时候。</li>
<li>数据归一化。</li>
<li>调整模型，和图像大小相等的featuremap最好不用</li>
<li>优化函数，学习率。会影响一点</li>
<li>随机乱序，在最后抖动的时候，会很稳定</li>
</ul>
<h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>归一化对模型的影响，真的是很大。</p>
<h3 id="数据加强"><a href="#数据加强" class="headerlink" title="数据加强"></a>数据加强</h3><p>可以扩充数据</p>
<h3 id="随机乱序"><a href="#随机乱序" class="headerlink" title="随机乱序"></a>随机乱序</h3><p>batch——size小，并且没有随机乱序的话，模型会学习到一个局部的数据，模型鲁棒性低。随机乱序对模型有很大的作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下连续写了两个肿瘤分割（图像分割）的感觉。与一路走过的坑。&lt;/p&gt;
&lt;h2 id=&quot;model&quot;&gt;&lt;a href=&quot;#model&quot; class=&quot;headerlink&quot; title=&quot;model&quot;&gt;&lt;/a&gt;model&lt;/h2&gt;&lt;h3 id=&quot;fcn&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="deeplearn" scheme="http://zsdf.shop/categories/deeplearn/"/>
    
    
      <category term="deeplearn" scheme="http://zsdf.shop/tags/deeplearn/"/>
    
      <category term="总结" scheme="http://zsdf.shop/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="训练技巧" scheme="http://zsdf.shop/tags/%E8%AE%AD%E7%BB%83%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>go网络编程</title>
    <link href="http://zsdf.shop/04/22/goNetWorkCode/"/>
    <id>http://zsdf.shop/04/22/goNetWorkCode/</id>
    <published>2019-04-22T13:00:47.000Z</published>
    <updated>2019-04-23T02:14:21.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h2><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line"><span class="keyword">defer</span> listener.Close()</div></pre></td></tr></table></figure>
<h3 id="客户端发送请求链接"><a href="#客户端发送请求链接" class="headerlink" title="客户端发送请求链接"></a>客户端发送请求链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line"><span class="keyword">defer</span> conn.Close()</div></pre></td></tr></table></figure>
<h3 id="接受客户端请求链接"><a href="#接受客户端请求链接" class="headerlink" title="接受客户端请求链接"></a>接受客户端请求链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conn, err := listener.Accept()</div><div class="line"><span class="keyword">defer</span> conn.Close()</div></pre></td></tr></table></figure>
<h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">n, err := conn.Read(buffer)</div></pre></td></tr></table></figure>
<h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n, err = conn.Write([]<span class="keyword">byte</span>(。。。))</div></pre></td></tr></table></figure>
<h2 id="server处理单client"><a href="#server处理单client" class="headerlink" title="server处理单client"></a>server处理单client</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> listener.Close()</div><div class="line">	buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	conn, err := listener.Accept()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(conn.RemoteAddr())</div><div class="line">	n, err := conn.Read(buffer)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="keyword">string</span>(buffer[:n]))</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	content := <span class="string">"hello world"</span></div><div class="line">	n, err := conn.Write([]<span class="keyword">byte</span>(content))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="server并发处理多client，并保持链接状态"><a href="#server并发处理多client，并保持链接状态" class="headerlink" title="server并发处理多client，并保持链接状态"></a>server并发处理多client，并保持链接状态</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>这是使用了go开启一个线程， 当有新的client链接时，都会开启一个go程。<br>如果把go去掉，只能处理单个client，当多个client请求链接时，只有第一个和server保持链接。其余的都在等待状态。有个教学视频说会被替换，经过测试，当不使用go时，线程会被阻塞到读取的位置，只是其余的client在等待，第一个链接的不会被替换。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> listener.Close()</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		conn, err := listener.Accept()</div><div class="line">		<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</div><div class="line">			fmt.Println(err)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">go</span> handle(conn)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(conn net.Conn)</span></span> &#123;</div><div class="line">	fmt.Println(conn.RemoteAddr())</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line">		n, err := conn.Read(buffer)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		content := strings.Trim(<span class="keyword">string</span>(buffer[:n]), <span class="string">" \r\n"</span>)</div><div class="line">		fmt.Println(n, content)</div><div class="line">		<span class="keyword">if</span> content == <span class="string">"exit"</span>&#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		fmt.Println(time.Now())</div><div class="line">		n, err = conn.Write([]<span class="keyword">byte</span>(time.Now().String()))</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h3><p>输入exit退出</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			str := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">			n, err := os.Stdin.Read(str)</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">				fmt.Println(err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">			n, err = conn.Write(str[:n])</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				fmt.Println(err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line">		n, err := conn.Read(buf)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">			fmt.Println(err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		fmt.Println(<span class="keyword">string</span>(buf[:n]))</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;连接过程&quot;&gt;&lt;a href=&quot;#连接过程&quot; class=&quot;headerlink&quot; title=&quot;连接过程&quot;&gt;&lt;/a&gt;连接过程&lt;/h2&gt;&lt;h3 id=&quot;监听端口&quot;&gt;&lt;a href=&quot;#监听端口&quot; class=&quot;headerlink&quot; title=&quot;监听端口&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="网络编程" scheme="http://zsdf.shop/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="计算机网络" scheme="http://zsdf.shop/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>go并发</title>
    <link href="http://zsdf.shop/04/17/go%E5%B9%B6%E5%8F%91/"/>
    <id>http://zsdf.shop/04/17/go并发/</id>
    <published>2019-04-17T10:48:03.000Z</published>
    <updated>2019-04-22T07:03:17.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道-channel"><a href="#管道-channel" class="headerlink" title="管道 channel"></a>管道 channel</h2><h3 id="关闭管道"><a href="#关闭管道" class="headerlink" title="关闭管道"></a>关闭管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++&#123;</div><div class="line">			ch &lt;- i</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="comment">// for &#123;</span></div><div class="line">	<span class="comment">// 	i, ok := &lt;-ch</span></div><div class="line">	<span class="comment">// 	if ok&#123;</span></div><div class="line">	<span class="comment">// 		fmt.Println(i)</span></div><div class="line">	<span class="comment">// 	&#125;else&#123;</span></div><div class="line">	<span class="comment">// 		break</span></div><div class="line">	<span class="comment">// 	&#125;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="comment">// for i, ok := &lt;-ch; ok;i, ok = &lt;-ch &#123;</span></div><div class="line">	<span class="comment">// 	fmt.Println(i)</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> ch&#123;</div><div class="line">		fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过close可以关闭管道，关闭后，不能写入东西，不能读取。可以通过ok判断。也可以通过range遍历</p>
<h3 id="单向管道"><a href="#单向管道" class="headerlink" title="单向管道"></a>单向管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">var</span> readch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = ch</div><div class="line">	<span class="keyword">var</span> writech <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = ch</div><div class="line">	<span class="comment">// writech&lt;- 0</span></div><div class="line">	<span class="comment">// fmt.Println(&lt;-readch)</span></div><div class="line">	<span class="comment">// readch &lt;- 0 编译不通过</span></div><div class="line">	<span class="comment">// &lt;- writech 编译不通过</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++&#123;</div><div class="line">			writech &lt;- i</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> readch&#123;</div><div class="line">		fmt.Println(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有无缓冲管道"><a href="#有无缓冲管道" class="headerlink" title="有无缓冲管道"></a>有无缓冲管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</div><div class="line">	<span class="comment">// ch := make(chan int)</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</div><div class="line">			ch &lt;- i</div><div class="line">			fmt.Println(<span class="string">"生成："</span>,i)</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">close</span>(ch)</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> ch&#123;</div><div class="line">		fmt.Println(<span class="string">"消费："</span>,i)</div><div class="line">		time.Sleep(time.Second)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到有缓冲管道在装满时，阻塞。</p>
<h2 id="runtime的使用"><a href="#runtime的使用" class="headerlink" title="runtime的使用"></a>runtime的使用</h2><h3 id="让出时间片"><a href="#让出时间片" class="headerlink" title="让出时间片"></a>让出时间片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</div><div class="line">			fmt.Println(<span class="string">"go"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">2</span>;i++&#123;</div><div class="line">		fmt.Println(<span class="string">"hello"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程运行结束，go协程运行没有结束，就会被自动关闭。会没有go的输出。让出时间片，就可以看到go协程的输出。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">3</span>;i++&#123;</div><div class="line">			fmt.Println(<span class="string">"go"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>;i&lt;<span class="number">2</span>;i++&#123;</div><div class="line">		runtime.Gosched() <span class="comment">// 让出时间片</span></div><div class="line">		fmt.Println(<span class="string">"hello"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="退出子线程"><a href="#退出子线程" class="headerlink" title="退出子线程"></a>退出子线程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"cc"</span>)</div><div class="line">	<span class="comment">// return  </span></div><div class="line">	<span class="comment">// runtime.Goexit()</span></div><div class="line">	fmt.Println(<span class="string">"dd"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">		fmt.Println(<span class="string">"aa"</span>)</div><div class="line">		test()</div><div class="line">		fmt.Println(<span class="string">"bb"</span>)</div><div class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">			ch &lt;- <span class="number">0</span></div><div class="line">		&#125;(ch)</div><div class="line">	&#125;(ch)</div><div class="line">	&lt;-ch</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br>        aa<br>        dd<br>        cc<br>        bb</p>
<p>取消return的注释后， 会输出：<br>        aa<br>        cc<br>        bb</p>
<p>由此说明，return退出的是函数</p>
<p>取消 runtime.Goexit() 的注释，会输出：<br>        aa<br>        cc</p>
<p>说明退出了整个线程</p>
<h3 id="最大并行数"><a href="#最大并行数" class="headerlink" title="最大并行数"></a>最大并行数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n := runtime.GOMAXPROCS(<span class="number">4</span>)</div><div class="line">	fmt.Println(n)</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">go</span> fmt.Print(<span class="string">"0"</span>)</div><div class="line">		fmt.Print(<span class="number">1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="time的使用"><a href="#time的使用" class="headerlink" title="time的使用"></a>time的使用</h2><h3 id="定时器的创建"><a href="#定时器的创建" class="headerlink" title="定时器的创建"></a>定时器的创建</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	timer := time.NewTimer(<span class="number">2</span> * time.Second)</div><div class="line">	fmt.Println(<span class="string">"时间"</span>,time.Now())</div><div class="line"></div><div class="line">	t := &lt;-timer.C</div><div class="line">	fmt.Println(t)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定时2秒钟。</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	time.Sleep(<span class="number">2</span>* time.Second)</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	&lt;-time.After(<span class="number">2</span>*time.Second)</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	timer := time.NewTimer(time.Second)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">		&lt;-timer.C</div><div class="line">		fmt.Println(<span class="string">"携程关闭"</span>)</div><div class="line">	&#125;()</div><div class="line">	<span class="comment">// timer.Stop()</span></div><div class="line">	<span class="keyword">for</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>取消timer.Stop()的注释，子线程将不会结束。因为在stop以后，timer.C 管道中不会有信息。</p>
<h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	fmt.Println(time.Now())</div><div class="line">	timer := time.NewTimer(<span class="number">3</span> * time.Second)</div><div class="line">	timer.Reset(time.Second)</div><div class="line">	&lt;-timer.C</div><div class="line">	fmt.Println(time.Now())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新设置定时器时间</p>
<h3 id="Ticker"><a href="#Ticker" class="headerlink" title="Ticker"></a>Ticker</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ticker := time.NewTicker(time.Second)</div><div class="line">	i:= <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</div><div class="line">		fmt.Println(<span class="string">"i="</span>,i)</div><div class="line">		i ++</div><div class="line">		<span class="keyword">if</span> i ==<span class="number">5</span>&#123;</div><div class="line">			ticker.Stop()</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以多次使用的定时器</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;管道-channel&quot;&gt;&lt;a href=&quot;#管道-channel&quot; class=&quot;headerlink&quot; title=&quot;管道 channel&quot;&gt;&lt;/a&gt;管道 channel&lt;/h2&gt;&lt;h3 id=&quot;关闭管道&quot;&gt;&lt;a href=&quot;#关闭管道&quot; class=&quot;head
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="并发" scheme="http://zsdf.shop/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>conda大坑</title>
    <link href="http://zsdf.shop/04/13/conda%E5%A4%A7%E5%9D%91/"/>
    <id>http://zsdf.shop/04/13/conda大坑/</id>
    <published>2019-04-13T05:29:41.000Z</published>
    <updated>2019-05-13T00:01:17.173Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>记录一个遇到的坑。是非常的坑的坑。 –conda的使用</p>
<hr>
<h2 id="conda坑"><a href="#conda坑" class="headerlink" title="conda坑"></a>conda坑</h2><h3 id="conda-install"><a href="#conda-install" class="headerlink" title="conda install"></a>conda install</h3><p>conda的强大，一直也听说过，只是没想到如此的强大。只是想安装一个包，把我的整个python环境全都给我替换了。</p>
<p>我只是想装一下gdcm，但是py37没有这个包，所以pip显示没有匹配到。本着尝试的想法，用conda install，结果把整个环境从python37升级到了py36，（没错是升级，conda是这么提醒的）。当我发现有问题时，非常的绝望，但是怂，只能静悄悄的看着进度条走了半个小时。</p>
<p>结果不错所料，完全不能用了。conda强大到让你绝望中，又有了希望。居然还可以回滚。见回滚使用。</p>
<h2 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install -n your_env_name [package]</div></pre></td></tr></table></figure>
<p>默认装在root下。奇坑，小心着用。</p>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n your_env_name python=X.X（2.7、3.6等)</div></pre></td></tr></table></figure>
<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda list --revision</div><div class="line">conda install --version N</div></pre></td></tr></table></figure>
<p>N为回退的版本。</p>
<p><a href="https://www.jianshu.com/p/97d3fc248cbb" target="_blank" rel="external">参考</a></p>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple/</a></p>
<p>中国科技大学: <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="external">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="external">http://pypi.hustunique.com/</a></p>
<p>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="external">http://pypi.sdutlinux.org/</a> </p>
<p>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a></p>
<p>以后还是使用pip</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;记录一个遇到的坑。是非常的坑的坑。 –conda的使用&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;conda坑&quot;&gt;&lt;a href=&quot;#conda坑&quot; class=&quot;headerlink&quot; title=&quot;conda坑&quot;&gt;&lt;/a&gt;conda坑&lt;/h2&gt;&lt;h3 id=&quot;cond
    
    </summary>
    
      <category term="python" scheme="http://zsdf.shop/categories/python/"/>
    
    
      <category term="python" scheme="http://zsdf.shop/tags/python/"/>
    
      <category term="conda" scheme="http://zsdf.shop/tags/conda/"/>
    
      <category term="奇坑" scheme="http://zsdf.shop/tags/%E5%A5%87%E5%9D%91/"/>
    
      <category term="pip" scheme="http://zsdf.shop/tags/pip/"/>
    
      <category term="模块管理" scheme="http://zsdf.shop/tags/%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Lightsocks环境配置</title>
    <link href="http://zsdf.shop/04/12/Lightsocks%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://zsdf.shop/04/12/Lightsocks环境配置/</id>
    <published>2019-04-12T01:03:48.000Z</published>
    <updated>2019-04-12T03:55:55.306Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/gwuhaolin/blog/issues/12" target="_blank" rel="external">你也能写个 Shadowsocks</a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>通过SOCKS5代理，<a href="https://github.com/gwuhaolin/lightsocks" target="_blank" rel="external">代码见</a>,</p>
<p>代码运行方法很简单，先运行server然后运行local，但是现在有个问题，如何才能让访问通过local的端口发出呢？<br>这个可以通过浏览器设置代理ip和端口，把代理ip和端口设置成local监听的端口，然后就可以访问到local。设置方法：</p>
<ul>
<li>这里使用的是chrome，</li>
<li>进入设置</li>
<li>进入高级设置</li>
<li>代理设置</li>
<li>这时候会弹出系统弹出窗</li>
<li>局域网（LAN）设置</li>
<li>在新的弹出窗可以看到</li>
</ul>
<p>现在可以访问local了，local也可以把数据转发到server，但是现在还有一个问题。server是直接把链接断掉，因为这个使用SOCKS5，server发现不是SOCKS5后，就丢弃了。local只是直接做了转发，需要浏览器直接设置为SOCKS5代理。</p>
<ul>
<li>这个使用的是chrome，需要一个插件</li>
<li>下载插件<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="external">SwitchyOmega</a></li>
<li>进入扩展程序，打开开发者模式，把下载的crx文件直接拖进去就可以直接安装了</li>
<li>进入SwitchyOmega界面，</li>
<li>新建模式，填写协议，ip：port</li>
<li>应用选项。</li>
</ul>
<h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><p>在代码中，可见server.go 文件。在文件中，handleConn方法主要做转发处理。所以这里对handleConn方法，这修改就可以了。</p>
<h3 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h3><p>我这里需要建立链接的日志，日志内容包括时间和源ip与目标ip。做一下修改就可以。</p>
<blockquote>
<p>首先修改securetcp中struct</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Addr <span class="keyword">interface</span> &#123;</div><div class="line">	Network() <span class="keyword">string</span> <span class="comment">// name of the network (for example, "tcp", "udp")</span></div><div class="line">	String() <span class="keyword">string</span>  <span class="comment">// string form of address (for example, "192.0.2.1:25", "[2001:db8::1]:80")</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 加密传输的 TCP Socket</span></div><div class="line"><span class="keyword">type</span> SecureTCPConn <span class="keyword">struct</span> &#123;</div><div class="line">	io.ReadWriteCloser</div><div class="line">	Address Addr</div><div class="line">	Cipher *cipher</div><div class="line">&#125;</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<blockquote>
<p>然后在这里输出local-&gt;server日志即可</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 进行转发</span></div><div class="line">    <span class="comment">// 从 localUser 读取数据发送到 dstServer</span></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        err := localConn.DecodeCopy(dstServer)</div><div class="line">        log.Println(time.Now(),<span class="string">"目标地址："</span>, dstServer.RemoteAddr(),<span class="string">"源地址："</span>, localConn.Address) <span class="comment">// 增加</span></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="comment">// 在 copy 的过程中可能会存在网络超时等 error 被 return，只要有一个发生了错误就退出本次工作</span></div><div class="line">            localConn.Close()</div><div class="line">            dstServer.Close()</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<blockquote>
<p>server -&gt; local 日志 需要做以下修改</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(&amp;SecureTCPConn&#123;</div><div class="line">		Cipher:          localConn.Cipher,</div><div class="line">		Address: dstServer.RemoteAddr(),</div><div class="line">		ReadWriteCloser: dstServer,</div><div class="line">	&#125;).EncodeCopyServer(localConn) <span class="comment">// 把EncodeCopy改为EncodeCopyServer方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在securetcp创建EncodeCopyServer方法</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(secureSocket *SecureTCPConn)</span> <span class="title">EncodeCopyServer</span><span class="params">(dst *SecureTCPConn)</span> <span class="title">error</span></span> &#123;</div><div class="line">	log.Println(time.Now(),<span class="string">"目标地址："</span>, dst.Address,<span class="string">"源地址："</span>, secureSocket.Address)</div><div class="line">	<span class="keyword">return</span> secureSocket.EncodeCopy(dst)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行，可以看到有日志的输出。</p>
<h2 id="修改后代码可见github"><a href="#修改后代码可见github" class="headerlink" title="修改后代码可见github"></a>修改后代码可见<a href="https://github.com/c-dafan/lightsocks" target="_blank" rel="external">github</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/gwuhaolin/blog/issues/12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你也能写个 Shadowsocks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境
    
    </summary>
    
      <category term="计算机网络" scheme="http://zsdf.shop/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="代理" scheme="http://zsdf.shop/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>NAT一探究竟</title>
    <link href="http://zsdf.shop/04/10/NAT%E4%B8%80%E6%8E%A2%E7%A9%B6%E7%AB%9F/"/>
    <id>http://zsdf.shop/04/10/NAT一探究竟/</id>
    <published>2019-04-10T05:39:04.000Z</published>
    <updated>2019-04-10T06:19:25.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直好奇socket在内网情况下，是如何和外网链接的。<br>如果都是私有ip还好理解，可以相互通信。但是公有ip都可以用，数据是怎么返回就成了一个迷。</p>
<p>由于最近需要抓取内网与外网交换的数据包，涉及到了内网ip与外网ip的转化，之前用的代理软件把ip给隐藏掉了，看不到是谁发过来的信息。需要自己编写一个代理软件，涉及到socket，顺便把NAT也探究一下。</p>
<h2 id="NAT基本原理及应用"><a href="#NAT基本原理及应用" class="headerlink" title="NAT基本原理及应用"></a><a href="https://blog.csdn.net/u013597671/article/details/74275852" target="_blank" rel="external">NAT基本原理及应用</a></h2><p>标题是外部链接</p>
<p><img src="/uploads/natdemo.jpg" alt="nat转换图"></p>
<h2 id="P2P，UDP和TCP穿透NAT"><a href="#P2P，UDP和TCP穿透NAT" class="headerlink" title="P2P，UDP和TCP穿透NAT"></a><a href="https://blog.csdn.net/leisure512/article/details/4900191" target="_blank" rel="external">P2P，UDP和TCP穿透NAT</a></h2><p>标题是外部链接</p>
<h2 id="搭建NAT服务器"><a href="#搭建NAT服务器" class="headerlink" title="搭建NAT服务器"></a>搭建NAT服务器</h2><p>先记下，等有了两个网卡，在尝试。</p>
<p><a href="https://www.cnblogs.com/wonux/p/5555953.html" target="_blank" rel="external">Linux服务器</a></p>
<p><a href="https://jingyan.baidu.com/article/3c343ff7e962840d3679637b.html" target="_blank" rel="external">Win服务器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直好奇socket在内网情况下，是如何和外网链接的。&lt;br&gt;如果都是私有ip还好理解，可以相互通信。但是公有ip都可以用，数据是怎么返回就
    
    </summary>
    
      <category term="计算机网络" scheme="http://zsdf.shop/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="NAT" scheme="http://zsdf.shop/tags/NAT/"/>
    
      <category term="socket" scheme="http://zsdf.shop/tags/socket/"/>
    
      <category term="代理" scheme="http://zsdf.shop/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="VPN" scheme="http://zsdf.shop/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>网络代理分析</title>
    <link href="http://zsdf.shop/04/10/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%88%86%E6%9E%90%E7%BC%96%E5%86%99/"/>
    <id>http://zsdf.shop/04/10/网络代理分析编写/</id>
    <published>2019-04-10T00:00:31.000Z</published>
    <updated>2019-04-10T05:42:18.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p><img src="/uploads/抓包.png" alt="数据包"></p>
<p>http 是通过tcp进行传输的， socket又是tcp的抽象，http直接通过socket就可以传输。<br>做代理的话，不用管http，直接socket转发就可以。http会自己根据多个tcp组装起一个完整的<br>数据。</p>
<p>抓包时，不小心抓到了https。https通过ssl传输。通过查找，比较同意<a href="https://www.jianshu.com/p/5ee027c51af0" target="_blank" rel="external">这个说法</a>。<br>在https与tcp之间，SSL在技术上位于应用层，但从开发者的角度看，它是一个提供TCP服务的运输层协议。</p>
<p>不管怎么说，最终都是通过tcp传输。</p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="一个轻巧的网络混淆代理-python"><a href="#一个轻巧的网络混淆代理-python" class="headerlink" title="一个轻巧的网络混淆代理-python"></a><a href="https://github.com/linw1995/lightsocks-python" target="_blank" rel="external">一个轻巧的网络混淆代理-python</a></h3><p>python 编写，大佬就是大佬，代码不是拿来用的，简直就是<br>用来欣赏的。基本都是异步的，采用asyncio包写了很多的异步执行的方法。在代码中，网络传输用的是socket直接把数据转发，从而达到代理的作用。</p>
<h3 id="一个轻巧的网络混淆代理-go"><a href="#一个轻巧的网络混淆代理-go" class="headerlink" title="一个轻巧的网络混淆代理-go"></a><a href="https://github.com/gwuhaolin/lightsocks" target="_blank" rel="external">一个轻巧的网络混淆代理-go</a></h3><p>go 编写， 想法的提出者，一篇博客详细介绍了如何编写一个<a href="https://github.com/gwuhaolin/blog/issues/12" target="_blank" rel="external">Shadowsocks</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过分析抓取的数据包与混淆代理代码，收获不少。之前一直把socket当作应用层，现在才发现socket是传输层的一个抽象，http可以直接通过socket进行传输。传输方法可以参考这<a href="https://www.jianshu.com/p/36f48b6ce223" target="_blank" rel="external">一篇博客</a>。<br>加深了对传输透明的理解。不用管其他层做的事情，把对应层做好，就没得问题。</p>
<p><a href="https://www.cnblogs.com/chenliyang/p/6558756.html" target="_blank" rel="external">http与https</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;抓包分析&quot;&gt;&lt;a href=&quot;#抓包分析&quot; class=&quot;headerlink&quot; title=&quot;抓包分析&quot;&gt;&lt;/a&gt;抓包分析&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/uploads/抓包.png&quot; alt=&quot;数据包&quot;&gt;&lt;/p&gt;
&lt;p&gt;http 是通过tcp进行传输的，
    
    </summary>
    
      <category term="计算机网络" scheme="http://zsdf.shop/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="python" scheme="http://zsdf.shop/tags/python/"/>
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="socket" scheme="http://zsdf.shop/tags/socket/"/>
    
      <category term="网络" scheme="http://zsdf.shop/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="http" scheme="http://zsdf.shop/tags/http/"/>
    
      <category term="tcp" scheme="http://zsdf.shop/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>go 爬虫</title>
    <link href="http://zsdf.shop/04/09/GoSpider/"/>
    <id>http://zsdf.shop/04/09/GoSpider/</id>
    <published>2019-04-09T09:36:56.000Z</published>
    <updated>2019-04-10T06:44:29.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要的"><a href="#需要的" class="headerlink" title="需要的"></a>需要的</h2><ul>
<li>net/http 请求网络</li>
<li>正则表达式 提取内容</li>
<li>encode/json 解析json</li>
<li>os 创建文件</li>
<li>并发</li>
</ul>
<h2 id="豆瓣电影评分"><a href="#豆瓣电影评分" class="headerlink" title="豆瓣电影评分"></a>豆瓣电影评分</h2><h3 id="获取请求"><a href="#获取请求" class="headerlink" title="获取请求"></a>获取请求</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">response, err := http.Get(url)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</div><div class="line"><span class="keyword">var</span> str <span class="keyword">string</span></div><div class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</div><div class="line">    n, err := response.Body.Read(buf)</div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    str += <span class="keyword">string</span>(buf[:n])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>通过正则表达式获取内容</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">reg1 := regexp.MustCompile(<span class="string">`&lt;img width="100" alt="(?s:(.*?))"`</span>)</div><div class="line">reg2 := regexp.MustCompile(<span class="string">`&lt;span class="rating_num" property="v:average"&gt;(?s:(.*?))&lt;/span&gt;`</span>)</div><div class="line">reg3 := regexp.MustCompile(<span class="string">`&lt;span&gt;(?s:(\d*?))人评价&lt;/span&gt;`</span>)</div><div class="line">str1 := reg1.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line">str2 := reg2.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line">str3 := reg3.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> str3&#123;</div><div class="line">    fmt.Println(str1[v],str2[v],str3[v])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//https://movie.douban.com/top250?start=75&amp;filter=</span></div><div class="line"><span class="comment">// &lt;img width="100" alt="</span></div><div class="line"><span class="comment">//&lt;span class="rating_num" property="v:average"&gt;8.7&lt;/span&gt;</span></div><div class="line"><span class="comment">// &lt;span&gt;620194人评价&lt;/span&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">spider</span><span class="params">(url <span class="keyword">string</span>, page <span class="keyword">chan</span> <span class="keyword">int</span>, v <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	response, err := http.Get(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</div><div class="line">	<span class="keyword">var</span> str <span class="keyword">string</span></div><div class="line">	<span class="keyword">for</span> <span class="literal">true</span> &#123;</div><div class="line">		n, err := response.Body.Read(buf)</div><div class="line">		<span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		str += <span class="keyword">string</span>(buf[:n])</div><div class="line">	&#125;</div><div class="line">	reg1 := regexp.MustCompile(<span class="string">`&lt;img width="100" alt="(?s:(.*?))"`</span>)</div><div class="line">	reg2 := regexp.MustCompile(<span class="string">`&lt;span class="rating_num" property="v:average"&gt;(?s:(.*?))&lt;/span&gt;`</span>)</div><div class="line">	reg3 := regexp.MustCompile(<span class="string">`&lt;span&gt;(?s:(\d*?))人评价&lt;/span&gt;`</span>)</div><div class="line">	str1 := reg1.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line">	str2 := reg2.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line">	str3 := reg3.FindAllStringSubmatch(str, <span class="number">-1</span>)</div><div class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> str3&#123;</div><div class="line">		fmt.Println(str1[v],str2[v],str3[v])</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> response.Body.Close()</div><div class="line">	page &lt;- v</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">working</span><span class="params">(start <span class="keyword">int</span>, end <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	page := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">for</span> v := start; v &lt;= end; v++ &#123;</div><div class="line">		url := fmt.Sprintf(<span class="string">"https://movie.douban.com/top250?start=%d&amp;filter="</span>, v*<span class="number">25</span>)</div><div class="line">		<span class="keyword">go</span> spider(url, page, v)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> v := start; v &lt;= end; v++ &#123;</div><div class="line">		fmt.Println(&lt;-page)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> start, end <span class="keyword">int</span></div><div class="line">	fmt.Scan(&amp;start)</div><div class="line">	fmt.Scan(&amp;end)</div><div class="line">	working(start, end)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="斗鱼"><a href="#斗鱼" class="headerlink" title="斗鱼"></a>斗鱼</h2><p>斗鱼通过后端传json到前端，然后解析json，在前端显示。请求部分同上</p>
<h3 id="json解析部分"><a href="#json解析部分" class="headerlink" title="json解析部分"></a>json解析部分</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jsonContent:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">_ = json.Unmarshal([]<span class="keyword">byte</span>(str),&amp;jsonContent)</div><div class="line">data := jsonContent[<span class="string">"data"</span>]</div><div class="line">data2 := data.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">data3 := data2[<span class="string">"rl"</span>].([]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> data3&#123;</div><div class="line">    fmt.Println(data3[v].(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">"rs16"</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>json解析需要成一个string:interface{}的字典。空接口类型需要自己断言。一层一层找到需要的数据。</p>
<h3 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// https://www.douyu.com/gapi/rknc/directory/yzRec/4</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">spider</span><span class="params">(v <span class="keyword">int</span>, page <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>  &#123;</div><div class="line">	url := <span class="string">"https://www.douyu.com/gapi/rknc/directory/yzRec/"</span>+strconv.Itoa(v)</div><div class="line">	response, err := http.Get(url)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">		page &lt;- v</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> str <span class="keyword">string</span></div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</div><div class="line">	<span class="keyword">for</span> <span class="literal">true</span> &#123;</div><div class="line">		n, err:= response.Body.Read(buf)</div><div class="line">		<span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</div><div class="line">			page &lt;- v</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		str += <span class="keyword">string</span>(buf[:n])</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> response.Body.Close()</div><div class="line"></div><div class="line">	<span class="comment">//json.Unmarshal([]byte(str), )</span></div><div class="line">	<span class="comment">//reg := regexp.MustCompile(`(https://rpic.douyucdn.cn/live-cover/.*?)"`)</span></div><div class="line">	<span class="comment">//pngs := reg.FindAllStringSubmatch(str, -1)</span></div><div class="line">	<span class="comment">//for v:= range pngs&#123;</span></div><div class="line">	<span class="comment">//	fmt.Println(pngs[v])</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line">	jsonContent:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">	_ = json.Unmarshal([]<span class="keyword">byte</span>(str),&amp;jsonContent)</div><div class="line">	data := jsonContent[<span class="string">"data"</span>]</div><div class="line">	data2 := data.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">	data3 := data2[<span class="string">"rl"</span>].([]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> data3&#123;</div><div class="line">		fmt.Println(data3[v].(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">"rs16"</span>])</div><div class="line">	&#125;</div><div class="line">	page &lt;- v</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DouSpider</span><span class="params">(start <span class="keyword">int</span>, end <span class="keyword">int</span>)</span></span>  &#123;</div><div class="line">	page := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">	<span class="keyword">for</span> v := start; v &lt;= end; v++ &#123;</div><div class="line">		<span class="keyword">go</span> spider(v, page)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> v := start; v &lt;= end; v++ &#123;</div><div class="line">		fmt.Println(&lt;-page)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> start, end <span class="keyword">int</span></div><div class="line">	fmt.Scan(&amp;start)</div><div class="line">	fmt.Scan(&amp;end)</div><div class="line">	DouSpider(start, end)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需要的&quot;&gt;&lt;a href=&quot;#需要的&quot; class=&quot;headerlink&quot; title=&quot;需要的&quot;&gt;&lt;/a&gt;需要的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;net/http 请求网络&lt;/li&gt;
&lt;li&gt;正则表达式 提取内容&lt;/li&gt;
&lt;li&gt;encode/json 解析jso
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="spider" scheme="http://zsdf.shop/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>GoNote</title>
    <link href="http://zsdf.shop/04/09/GoNote/"/>
    <id>http://zsdf.shop/04/09/GoNote/</id>
    <published>2019-04-09T05:26:50.000Z</published>
    <updated>2019-04-09T06:32:55.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数类型-匿名函数"><a href="#函数类型-匿名函数" class="headerlink" title="函数类型 匿名函数"></a>函数类型 匿名函数</h2><p>go 函数也是一种类型，用于声明变量，接收变量值</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">type</span> myFunc <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span></div><div class="line"><span class="title">func</span> <span class="title">main</span><span class="params">()</span>&#123;</div><div class="line">    <span class="keyword">var</span> myfunc myFunc</div><div class="line">    myfunc = <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">        <span class="keyword">return</span> a+b</div><div class="line">    &#125;</div><div class="line">    fmt.Println(myfunc(<span class="number">1</span>,<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>把函数当作一个参数</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> myFunc <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">calu</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>, myfunc myFunc)</span> <span class="title">int</span> &#123;</div><div class="line">    <span class="keyword">return</span> myfunc(a, b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> myfunc myFunc</div><div class="line">    myfunc = <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">        <span class="keyword">return</span> a+b</div><div class="line">    &#125;</div><div class="line">    fmt.Println(calu(<span class="number">1</span>,<span class="number">2</span>, myfunc))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包中变量，一直存在</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</div><div class="line">    vv := <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</div><div class="line">        vv++</div><div class="line">    <span class="keyword">return</span> vv </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    f := test02()</div><div class="line">    fmt.Println(f())</div><div class="line">    fmt.Println(f())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="匿名导入"><a href="#匿名导入" class="headerlink" title="匿名导入"></a>匿名导入</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _ <span class="string">"fmt"</span></div></pre></td></tr></table></figure>
<p>执行init函数</p>
<h2 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h2><p>继承</p>
<h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">type</span> people <span class="keyword">struct</span>&#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    sex <span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> student <span class="keyword">struct</span>&#123;</div><div class="line">    people</div><div class="line">    id <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</div><div class="line">    s := student&#123;people&#123;<span class="string">"aa"</span>,<span class="number">16</span>,<span class="string">'m'</span>&#125;,<span class="number">150706</span>&#125;</div><div class="line">    fmt.Println(s)</div><div class="line">    s2 := student&#123;people:people&#123;name:<span class="string">"bb"</span>&#125;    id:<span class="number">160706</span>&#125;</div><div class="line">    fmt.Println(s2)</div><div class="line">    <span class="comment">// s3 := student&#123;"aa",16,'m',150706&#125; 错误用法</span></div><div class="line">    s4 := student&#123;&#125;</div><div class="line">    s4.id = <span class="number">170706</span></div><div class="line">    s4.name = <span class="string">"cc"</span></div><div class="line">    s4.age = <span class="number">17</span></div><div class="line">    s4.sex = <span class="string">'m'</span></div><div class="line">    fmt.Println(s4)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非结构字段"><a href="#非结构字段" class="headerlink" title="非结构字段"></a>非结构字段</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">type</span> people <span class="keyword">struct</span>&#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    sex <span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> student <span class="keyword">struct</span>&#123;</div><div class="line">    people</div><div class="line">    <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</div><div class="line">    s := student&#123;people&#123;<span class="string">"aa"</span>,<span class="number">16</span>,<span class="string">'m'</span>&#125;,<span class="number">150706</span>&#125;</div><div class="line">    fmt.Println(s)</div><div class="line">    s4 := student&#123;&#125;</div><div class="line">    s4.<span class="keyword">int</span> = <span class="number">170706</span></div><div class="line">    s4.name = <span class="string">"cc"</span></div><div class="line">    s4.age = <span class="number">17</span></div><div class="line">    s4.sex = <span class="string">'m'</span></div><div class="line">    fmt.Println(s4)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="同名字段"><a href="#同名字段" class="headerlink" title="同名字段"></a>同名字段</h3><p>就近原则</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="值与引用"><a href="#值与引用" class="headerlink" title="值与引用"></a>值与引用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> people <span class="keyword">struct</span>&#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    sex <span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *people)</span> <span class="title">setinfoPointer</span><span class="params">()</span></span>&#123;</div><div class="line">    this.name = <span class="string">"a"</span></div><div class="line">    this.age = <span class="number">12</span></div><div class="line">    this.sex = <span class="string">'m'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this people)</span> <span class="title">setinfo</span><span class="params">()</span></span>&#123;</div><div class="line">    this.name = <span class="string">"a"</span></div><div class="line">    this.age = <span class="number">12</span></div><div class="line">    this.sex = <span class="string">'m'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</div><div class="line">    p := people&#123;&#125;</div><div class="line">    p.setinfo() <span class="comment">// 无效</span></div><div class="line">    fmt.Println(p)</div><div class="line">    p.setinfoPointer()</div><div class="line">    fmt.Println(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="空接口-类型断言"><a href="#空接口-类型断言" class="headerlink" title="空接口 类型断言"></a>空接口 类型断言</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> people <span class="keyword">struct</span>&#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    sex <span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</div><div class="line">    ii := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">3</span>)</div><div class="line">    ii[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">    ii[<span class="number">1</span>] = <span class="string">"2"</span></div><div class="line">    ii[<span class="number">2</span>] = people&#123;name:<span class="string">"3"</span>&#125;</div><div class="line">    <span class="keyword">for</span> _,d := <span class="keyword">range</span> ii &#123;</div><div class="line">        <span class="keyword">if</span> val, ok:=d.(<span class="keyword">int</span>); ok&#123;</div><div class="line">            fmt.Println(<span class="string">"int"</span>,val)</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> val, ok:=d.(<span class="keyword">string</span>); ok&#123;</div><div class="line">            fmt.Println(<span class="string">"string"</span>,val)</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> val, ok:=d.(people); ok&#123;</div><div class="line">            fmt.Println(<span class="string">"people"</span>,val)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> _,d := <span class="keyword">range</span> ii &#123;</div><div class="line">        <span class="keyword">switch</span> value := d.(<span class="keyword">type</span>) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">            fmt.Println(<span class="string">"int"</span>,value)</div><div class="line">        <span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">            fmt.Println(<span class="string">"string"</span>,value)</div><div class="line">        <span class="keyword">case</span> people:</div><div class="line">            fmt.Println(<span class="string">"people"</span>,value)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数类型-匿名函数&quot;&gt;&lt;a href=&quot;#函数类型-匿名函数&quot; class=&quot;headerlink&quot; title=&quot;函数类型 匿名函数&quot;&gt;&lt;/a&gt;函数类型 匿名函数&lt;/h2&gt;&lt;p&gt;go 函数也是一种类型，用于声明变量，接收变量值&lt;/p&gt;
&lt;figure class
    
    </summary>
    
      <category term="go" scheme="http://zsdf.shop/categories/go/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="note" scheme="http://zsdf.shop/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>面试准备</title>
    <link href="http://zsdf.shop/04/07/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://zsdf.shop/04/07/面试准备/</id>
    <published>2019-04-07T06:22:33.000Z</published>
    <updated>2019-04-08T14:00:23.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试前准备"><a href="#面试前准备" class="headerlink" title="面试前准备"></a>面试前准备</h1><hr>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p><a href="https://github.com/kenwoodjw/python_interview_question" target="_blank" rel="external">python面试题</a></p>
<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p><a href="https://github.com/guanzhenxing/java_interview_manual" target="_blank" rel="external">java面试题</a></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">redis入门</a></p>
<h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2><p><a href="https://www.cnblogs.com/shenyixin/p/9084249.html" target="_blank" rel="external">rabbitmq复习</a></p>
<p><a href="https://www.cnblogs.com/frankyou/p/5283539.html" target="_blank" rel="external">rabbitmq复习</a></p>
<h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/83715633" target="_blank" rel="external">springboot</a><br><a href="https://www.cnblogs.com/3xmq/p/springboot.html" target="_blank" rel="external">springboot</a></p>
<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><p><a href="https://blog.csdn.net/itcastcpp/article/details/80462619" target="_blank" rel="external">golang</a></p>
<p><a href="http://www.imooc.com/article/264183" target="_blank" rel="external">go</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面试前准备&quot;&gt;&lt;a href=&quot;#面试前准备&quot; class=&quot;headerlink&quot; title=&quot;面试前准备&quot;&gt;&lt;/a&gt;面试前准备&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="面试" scheme="http://zsdf.shop/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="python" scheme="http://zsdf.shop/tags/python/"/>
    
      <category term="java" scheme="http://zsdf.shop/tags/java/"/>
    
      <category term="redis" scheme="http://zsdf.shop/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>shop_go_vue</title>
    <link href="http://zsdf.shop/04/05/shop-go-vue/"/>
    <id>http://zsdf.shop/04/05/shop-go-vue/</id>
    <published>2019-04-05T02:44:58.000Z</published>
    <updated>2019-04-06T04:42:53.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个购物网站总结"><a href="#一个购物网站总结" class="headerlink" title="一个购物网站总结"></a>一个购物网站总结</h1><p>一个购物网站，数据库设计如下：<br><img src="https://raw.githubusercontent.com/c-dafan/Shop_GoVueWeb/master/shop/static/shop.png" alt="数据库"></p>
<p>前端nodejs + vue-cli + Vue + Element-UI</p>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>采用element-UI组件。记录一下体验：</p>
<pre><code>vue整体体验很好，通过router和router-view可以很好的提高前端布局代码的复用性。对我这种不擅长写前端，每次写前端ctrl+c，ctrl+v的真的是非常的友好。另外，数据的绑定、一些指令也是相当的好用
使用vue-cli工具，需要借助nodejs，可以实现前后端的分离。在vue-cli的工程上，目录结构很清晰，很容易写一个前端。不过需要一些nodejs的知识，不然学起来真的很难受。
element-UI组件很好使用，不用懂很多css也能写出来很漂亮页面，有种纯写html最后得到带css效果的页面。
</code></pre><p>笔记：</p>
<blockquote>
<p>父子组件通信</p>
</blockquote>
<ul>
<li><p>v-model 数据双向绑定</p>
</li>
<li><p>v-on （@）事件</p>
</li>
<li><p>v-bind （:） 数据单向绑定</p>
</li>
</ul>
<blockquote>
<p>内置指令</p>
</blockquote>
<ul>
<li><p>v-if、v-else、v-else-if 条件</p>
</li>
<li><p>v-for 循环 （o, i） in objs 其中i是索引，这个顺序好像和我见过的大部分语言相反</p>
</li>
</ul>
<blockquote>
<p>函数</p>
</blockquote>
<ul>
<li><p>created</p>
</li>
<li><p>watch 一直观察这个变量</p>
</li>
<li><p>computed 一个变量通过函数结算出来</p>
</li>
</ul>
<blockquote>
<p>slot、props、scope</p>
</blockquote>
<ul>
<li><p>slot 插槽</p>
</li>
<li><p>scope</p>
</li>
<li><p>props</p>
</li>
</ul>
<h2 id="beego"><a href="#beego" class="headerlink" title="beego"></a>beego</h2><p>beego体验：</p>
<pre><code>beego从入门到放弃，没有重新运行解决不了的问题，beego基于mvc三层的一个框架，只要学过其他语言的WEB，入手还是很容易的。
学习go语言一天，入手beego，本着练习go语言的原则，写了这个项目。
beego有个bee工具，使用起来很容易。bee generate 几乎直接把真的网站的代码都写完了，需要改一些逻辑。生成的controller中GetAll也太恨了，把整个数据库的信息可以按照任意条件都能查询到。
</code></pre><p>项目中遇到的问题：</p>
<pre><code>通过注释配url，这个不知道是我的问题，还是beego的问题。配好的url，第一次不起作用，需要把进程关了，然后重新运行。第一次运行会生成一个文件，但是进入url会404，第二次运行就没问题。
beego的orm也很用，很简单的就能和数据库映射。查询外键中的对象很可以查询到，不过一旦用了外键，外键对应的就成为了一个结构体，在发post等请求时，传外键Id时，需要多写一个{}。
</code></pre><p>beego笔记：</p>
<blockquote>
<p>bee</p>
</blockquote>
<pre><code>generate    生成代码
new         创建
pack        打包
run         运行
</code></pre><blockquote>
<p>orm</p>
</blockquote>
<ul>
<li><p>qs.RelatedSel() 加载外键</p>
<pre><code>参数：要加载的外键名字，多层的话，可以使用__
</code></pre></li>
<li><p>qs.Limit(limit, offset)</p>
</li>
<li><p>struct</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</div><div class="line">	Id             <span class="keyword">int</span>    <span class="string">`orm:"column(aid);auto"`</span></div><div class="line">	Uid            *User  <span class="string">`orm:"column(uid);null;rel(fk)"`</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// auto自增、</span></div><div class="line"><span class="comment">// null可以为空、默认为非空、</span></div><div class="line"><span class="comment">// auto_now_add;type(datetime) 自动放到当时时间</span></div><div class="line"><span class="comment">// auto_now;type(datetime) 自动放到当时时间</span></div><div class="line"><span class="comment">// 区别auto_now_add第一次添加的时间，更新时间不变，auto_now每次更新时间改变</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Controller</p>
</blockquote>
<ul>
<li><p>router</p>
</li>
<li><p>ServeJSON</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个购物网站总结&quot;&gt;&lt;a href=&quot;#一个购物网站总结&quot; class=&quot;headerlink&quot; title=&quot;一个购物网站总结&quot;&gt;&lt;/a&gt;一个购物网站总结&lt;/h1&gt;&lt;p&gt;一个购物网站，数据库设计如下：&lt;br&gt;&lt;img src=&quot;https://raw.githu
    
    </summary>
    
      <category term="Web" scheme="http://zsdf.shop/categories/Web/"/>
    
    
      <category term="go" scheme="http://zsdf.shop/tags/go/"/>
    
      <category term="vue" scheme="http://zsdf.shop/tags/vue/"/>
    
      <category term="beego" scheme="http://zsdf.shop/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://zsdf.shop/04/25/hello/"/>
    <id>http://zsdf.shop/04/25/hello/</id>
    <published>2017-04-25T11:12:19.000Z</published>
    <updated>2019-04-06T02:45:07.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客笔记"><a href="#博客笔记" class="headerlink" title="博客笔记"></a>博客笔记</h1><hr>
<p>自2017年搭建好，再也没用过，两年后的现在<br>重拾博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;博客笔记&quot;&gt;&lt;a href=&quot;#博客笔记&quot; class=&quot;headerlink&quot; title=&quot;博客笔记&quot;&gt;&lt;/a&gt;博客笔记&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;自2017年搭建好，再也没用过，两年后的现在&lt;br&gt;重拾博客&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
